{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2022-04-05T19:08:39.255Z",
    "end": "2022-04-05T19:08:39.885Z",
    "duration": 630,
    "testsRegistered": 1,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ac2e8f84-4228-40d5-9a03-ed4d1a304e3c",
      "title": "",
      "fullFile": "cypress/integration/admin/test_example_spec.js",
      "file": "cypress/integration/admin/test_example_spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "111b44d8-13ad-402e-a81d-dad83840c240",
          "title": "Test example DIDs on endpoint: api.dev.godiddy.com",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Tests if all example DIDs return HTTP status 200",
              "fullTitle": "Test example DIDs on endpoint: api.dev.godiddy.com Tests if all example DIDs return HTTP status 200",
              "timedOut": null,
              "duration": 582,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "function getExamples() {\n  cy.request({\n    method: \"GET\",\n    url: \"https://api.dev.godiddy.com/0.1.0/universal-resolver/testIdentifiers\",\n    failOnStatusCode: false\n  }).then(response => {\n    const methods = response.body;\n    cy.wrap(methods).as(\"examplesGodiddy\");\n  });\n}\ngetExamples();\ncy.get(\"@examplesGodiddy\").then(response => {\n  console.log(response);\n  Object.keys(response).forEach(key => {\n    response[key].forEach(did => {\n      cy.request({\n        method: \"GET\",\n        url: \"https://api.dev.godiddy.com/0.1.0/universal-resolver/identifiers/\" + did,\n        failOnStatusCode: false\n      }).then(response => {\n        softExpect(response.status).to.eq(200);\n      });\n    });\n  });\n});",
              "err": {
                "message": "TypeError: softExpect is not a function",
                "estack": "TypeError: softExpect is not a function\n    at Context.eval (http://localhost:34959/__cypress/tests?p=cypress/integration/admin/test_example_spec.js:125:13)",
                "diff": null
              },
              "uuid": "898c0795-6b85-4e5d-a2ee-66358d0790e6",
              "parentUUID": "111b44d8-13ad-402e-a81d-dad83840c240",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "898c0795-6b85-4e5d-a2ee-66358d0790e6"
          ],
          "pending": [],
          "skipped": [],
          "duration": 582,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.2"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mocha",
        "configFile": "reporterOpts.json",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.1.1"
    }
  }
}