{
  "stats": {
    "suites": 2,
    "tests": 32,
    "passes": 18,
    "pending": 0,
    "failures": 14,
    "start": "2022-03-29T10:19:16.191Z",
    "end": "2022-03-29T10:19:39.458Z",
    "duration": 21304,
    "testsRegistered": 32,
    "passPercent": 56.25,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b0dcfa0e-8dd8-43ee-b186-427261ee730d",
      "title": "",
      "fullFile": "cypress/integration/resolver_spec.js",
      "file": "cypress/integration/resolver_spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b08513a0-8e32-4aa4-b805-9b630496fea6",
          "title": "Test Scenario 1: DID Resolution Result overview: https://api.godiddy.com/0.1.0/universal-resolver/identifiers/",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP code 200",
              "fullTitle": "Test Scenario 1: DID Resolution Result overview: https://api.godiddy.com/0.1.0/universal-resolver/identifiers/ MUST return HTTP code 200",
              "timedOut": null,
              "duration": 2956,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@request\").then(response => {\n  expect(response.status).to.eq(200);\n});",
              "err": {},
              "uuid": "c3ecc6f1-d1ca-45b7-b34f-05c766236e67",
              "parentUUID": "b08513a0-8e32-4aa4-b805-9b630496fea6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should have header with Content-Type with value application/ld+json;profile=\"https://w3id.org/did-resolution\" ",
              "fullTitle": "Test Scenario 1: DID Resolution Result overview: https://api.godiddy.com/0.1.0/universal-resolver/identifiers/ Should have header with Content-Type with value application/ld+json;profile=\"https://w3id.org/did-resolution\" ",
              "timedOut": null,
              "duration": 843,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@request\").then(response => {\n  expect(response.headers[\"content-type\"]).to.contain('application/ld+json; profile=\"https://w3id.org/did-resolution');\n});",
              "err": {},
              "uuid": "aea05ee2-5316-419a-bf3f-4d5fe5b79f61",
              "parentUUID": "b08513a0-8e32-4aa4-b805-9b630496fea6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Must contain property didDocument",
              "fullTitle": "Test Scenario 1: DID Resolution Result overview: https://api.godiddy.com/0.1.0/universal-resolver/identifiers/ Must contain property didDocument",
              "timedOut": null,
              "duration": 2322,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@request\").then(response => {\n  expect(response.body).to.have.property(\"didDocument\");\n});",
              "err": {},
              "uuid": "1ff8c145-5f86-45e8-94d5-53c7a4b230a7",
              "parentUUID": "b08513a0-8e32-4aa4-b805-9b630496fea6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Must contain property didResolutionMetadata",
              "fullTitle": "Test Scenario 1: DID Resolution Result overview: https://api.godiddy.com/0.1.0/universal-resolver/identifiers/ Must contain property didResolutionMetadata",
              "timedOut": null,
              "duration": 896,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@request\").then(response => {\n  expect(response.body).to.have.property(\"didResolutionMetadata\");\n});",
              "err": {},
              "uuid": "67108f3e-2bad-478e-b151-4308371a34ab",
              "parentUUID": "b08513a0-8e32-4aa4-b805-9b630496fea6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Must contain property didDocumentMetadata",
              "fullTitle": "Test Scenario 1: DID Resolution Result overview: https://api.godiddy.com/0.1.0/universal-resolver/identifiers/ Must contain property didDocumentMetadata",
              "timedOut": null,
              "duration": 867,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@request\").then(response => {\n  expect(response.body).to.have.property(\"didDocumentMetadata\");\n});",
              "err": {},
              "uuid": "7387252f-92fa-407d-85e9-eb56edac728a",
              "parentUUID": "b08513a0-8e32-4aa4-b805-9b630496fea6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c3ecc6f1-d1ca-45b7-b34f-05c766236e67",
            "aea05ee2-5316-419a-bf3f-4d5fe5b79f61",
            "1ff8c145-5f86-45e8-94d5-53c7a4b230a7",
            "67108f3e-2bad-478e-b151-4308371a34ab",
            "7387252f-92fa-407d-85e9-eb56edac728a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7884,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1309c080-dc35-4c50-81bd-7b5fbe2f3bf8",
          "title": "Test Scenario 2: JSON-LD DID document",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should have response status 200",
              "fullTitle": "Test Scenario 2: JSON-LD DID document Should have response status 200",
              "timedOut": null,
              "duration": 1849,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.status).to.eq(200);\n});",
              "err": {},
              "uuid": "9ac1a2af-547e-413f-af14-fc8ca6abf417",
              "parentUUID": "1309c080-dc35-4c50-81bd-7b5fbe2f3bf8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should have header with content type",
              "fullTitle": "Test Scenario 2: JSON-LD DID document Should have header with content type",
              "timedOut": null,
              "duration": 734,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.headers[\"content-type\"]).to.contain(\"application/did+ld+json\");\n});",
              "err": {},
              "uuid": "955eb9a8-5f83-4f7b-886c-314795ae32e2",
              "parentUUID": "1309c080-dc35-4c50-81bd-7b5fbe2f3bf8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not have property didDocument",
              "fullTitle": "Test Scenario 2: JSON-LD DID document Should not have property didDocument",
              "timedOut": null,
              "duration": 1382,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.body).not.to.have.property(\"didDocument\");\n});",
              "err": {},
              "uuid": "65772785-03c9-44b0-97a0-1b1b8e3ec6fa",
              "parentUUID": "1309c080-dc35-4c50-81bd-7b5fbe2f3bf8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should have property @context",
              "fullTitle": "Test Scenario 2: JSON-LD DID document Should have property @context",
              "timedOut": null,
              "duration": 596,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.body).to.have.property(\"@context\");\n});",
              "err": {},
              "uuid": "bba46711-1046-4366-bbae-aa787355cf2d",
              "parentUUID": "1309c080-dc35-4c50-81bd-7b5fbe2f3bf8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9ac1a2af-547e-413f-af14-fc8ca6abf417",
            "955eb9a8-5f83-4f7b-886c-314795ae32e2",
            "65772785-03c9-44b0-97a0-1b1b8e3ec6fa",
            "bba46711-1046-4366-bbae-aa787355cf2d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4561,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "50ffe140-75b8-41e4-947e-bc03d5d3a706",
          "title": "Test Scenario 3: Representation not supported",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP code 406",
              "fullTitle": "Test Scenario 3: Representation not supported MUST return HTTP code 406",
              "timedOut": null,
              "duration": 204,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:WRfXPg8dantKVubE3HX8pw\",\n  failOnStatusCode: false,\n  headers: {\n    Accept: \"image/png\"\n  }\n}).then(response => {\n  expect(response.status).to.eq(406);\n});",
              "err": {},
              "uuid": "27bb6bc1-1aee-44d7-82b8-e930b463ac39",
              "parentUUID": "50ffe140-75b8-41e4-947e-bc03d5d3a706",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "27bb6bc1-1aee-44d7-82b8-e930b463ac39"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 204,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "85ecaf1a-8e02-465e-9c65-495e8bcfd136",
          "title": "Test Scenario 4: Deactivated",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP code 410",
              "fullTitle": "Test Scenario 4: Deactivated MUST return HTTP code 410",
              "timedOut": null,
              "duration": 224,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:kilt:4r6RdVMNes2eEobxyxH7aVsesUqR2X175sUAXJfo7dEWxHUS\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(410);\n});",
              "err": {
                "message": "AssertionError: expected 404 to equal 410",
                "estack": "AssertionError: expected 404 to equal 410\n    at Context.eval (http://localhost:40333/__cypress/tests?p=cypress/integration/resolver_spec.js:197:36)",
                "diff": "- 404\n+ 410\n"
              },
              "uuid": "14b2bb8a-4854-4d2e-82f2-fe7004e050a1",
              "parentUUID": "85ecaf1a-8e02-465e-9c65-495e8bcfd136",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST return HTTP header Content-Type",
              "fullTitle": "Test Scenario 4: Deactivated MUST return HTTP header Content-Type",
              "timedOut": null,
              "duration": 221,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:kilt:4r6RdVMNes2eEobxyxH7aVsesUqR2X175sUAXJfo7dEWxHUS\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n});",
              "err": {
                "message": "AssertionError: expected 'text/plain;charset=UTF-8' to include 'application/ld+json;profile=\"https://w3id.org/did-resolution\"'",
                "estack": "AssertionError: expected 'text/plain;charset=UTF-8' to include 'application/ld+json;profile=\"https://w3id.org/did-resolution\"'\n    at Context.eval (http://localhost:40333/__cypress/tests?p=cypress/integration/resolver_spec.js:206:53)",
                "diff": null
              },
              "uuid": "054206ad-3557-4708-aa12-244f41a6ec94",
              "parentUUID": "85ecaf1a-8e02-465e-9c65-495e8bcfd136",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "JSON object MUST contain property didDocumentMetadata.deactivated = true",
              "fullTitle": "Test Scenario 4: Deactivated JSON object MUST contain property didDocumentMetadata.deactivated = true",
              "timedOut": null,
              "duration": 217,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:kilt:4r6RdVMNes2eEobxyxH7aVsesUqR2X175sUAXJfo7dEWxHUS\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.body.didDocumentMetadata.deactivated).to.eq(true);\n});",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'deactivated')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'deactivated')\n    at Context.eval (http://localhost:40333/__cypress/tests?p=cypress/integration/resolver_spec.js:215:50)",
                "diff": null
              },
              "uuid": "403ca6ff-591d-4ff8-b530-943259a6a440",
              "parentUUID": "85ecaf1a-8e02-465e-9c65-495e8bcfd136",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "14b2bb8a-4854-4d2e-82f2-fe7004e050a1",
            "054206ad-3557-4708-aa12-244f41a6ec94",
            "403ca6ff-591d-4ff8-b530-943259a6a440"
          ],
          "pending": [],
          "skipped": [],
          "duration": 662,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0022b4c9-662e-4ad7-a6c8-aa8a411441a7",
          "title": "Test Scenario 5: Not found",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP code 404",
              "fullTitle": "Test Scenario 5: Not found MUST return HTTP code 404",
              "timedOut": null,
              "duration": 223,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:0000000000000000000000\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n});",
              "err": {},
              "uuid": "0c9548a2-4515-4156-bc76-e454b61a42dd",
              "parentUUID": "0022b4c9-662e-4ad7-a6c8-aa8a411441a7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST return HTTP header Content-Type with value application/ld+json;profile=\"https://w3id.org/did-resolution\"",
              "fullTitle": "Test Scenario 5: Not found MUST return HTTP header Content-Type with value application/ld+json;profile=\"https://w3id.org/did-resolution\"",
              "timedOut": null,
              "duration": 228,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:0000000000000000000000\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n});",
              "err": {
                "message": "AssertionError: expected 'text/plain;charset=UTF-8' to include 'application/ld+json;profile=\"https://w3id.org/did-resolution\"'",
                "estack": "AssertionError: expected 'text/plain;charset=UTF-8' to include 'application/ld+json;profile=\"https://w3id.org/did-resolution\"'\n    at Context.eval (http://localhost:40333/__cypress/tests?p=cypress/integration/resolver_spec.js:238:53)",
                "diff": null
              },
              "uuid": "7a70c84e-70cb-43b3-a764-0076dbe85875",
              "parentUUID": "0022b4c9-662e-4ad7-a6c8-aa8a411441a7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "JSON object MUST contain property didResolutionMetadata.error = \"notFound\"",
              "fullTitle": "Test Scenario 5: Not found JSON object MUST contain property didResolutionMetadata.error = \"notFound\"",
              "timedOut": null,
              "duration": 635,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"https://dev.uniresolver.io/1.0/identifiers/did:sov:0000000000000000000000\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.body.didResolutionMetadata.error).to.eq(\"notFound\");\n});",
              "err": {},
              "uuid": "09f5efd5-7c3d-40e3-9720-335acd640d6b",
              "parentUUID": "0022b4c9-662e-4ad7-a6c8-aa8a411441a7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0c9548a2-4515-4156-bc76-e454b61a42dd",
            "09f5efd5-7c3d-40e3-9720-335acd640d6b"
          ],
          "failures": [
            "7a70c84e-70cb-43b3-a764-0076dbe85875"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1086,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6b664a0f-dffe-4aff-9313-02c5b6e6ee46",
          "title": "Test Scenario 6: Invalid DID",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP code 400",
              "fullTitle": "Test Scenario 6: Invalid DID MUST return HTTP code 400",
              "timedOut": null,
              "duration": 222,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:example_222\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400);\n});",
              "err": {
                "message": "AssertionError: expected 500 to equal 400",
                "estack": "AssertionError: expected 500 to equal 400\n    at Context.eval (http://localhost:40333/__cypress/tests?p=cypress/integration/resolver_spec.js:261:36)",
                "diff": "- 500\n+ 400\n"
              },
              "uuid": "43301efb-4af5-49b8-910d-0dc0b54ad276",
              "parentUUID": "6b664a0f-dffe-4aff-9313-02c5b6e6ee46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST return HTTP header Content-Type with value application/ld+json;profile=\"https://w3id.org/did-resolution\"",
              "fullTitle": "Test Scenario 6: Invalid DID MUST return HTTP header Content-Type with value application/ld+json;profile=\"https://w3id.org/did-resolution\"",
              "timedOut": null,
              "duration": 216,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:example_222\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n});",
              "err": {
                "message": "AssertionError: expected 'text/plain;charset=UTF-8' to include 'application/ld+json;profile=\"https://w3id.org/did-resolution\"'",
                "estack": "AssertionError: expected 'text/plain;charset=UTF-8' to include 'application/ld+json;profile=\"https://w3id.org/did-resolution\"'\n    at Context.eval (http://localhost:40333/__cypress/tests?p=cypress/integration/resolver_spec.js:270:53)",
                "diff": null
              },
              "uuid": "eec01f05-fdce-4b6a-98ad-3c39f1557ca8",
              "parentUUID": "6b664a0f-dffe-4aff-9313-02c5b6e6ee46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "JSON object MUST contain property didResolutionMetadata.error = \"invalidDid\"",
              "fullTitle": "Test Scenario 6: Invalid DID JSON object MUST contain property didResolutionMetadata.error = \"invalidDid\"",
              "timedOut": null,
              "duration": 209,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:example_222\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.body.didResolutionMetadata.error).to.eq(\"invalidDid\");\n});",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'error')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'error')\n    at Context.eval (http://localhost:40333/__cypress/tests?p=cypress/integration/resolver_spec.js:279:52)",
                "diff": null
              },
              "uuid": "71b1b9af-198e-41b7-8405-1ee92c5caf2b",
              "parentUUID": "6b664a0f-dffe-4aff-9313-02c5b6e6ee46",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "43301efb-4af5-49b8-910d-0dc0b54ad276",
            "eec01f05-fdce-4b6a-98ad-3c39f1557ca8",
            "71b1b9af-198e-41b7-8405-1ee92c5caf2b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 647,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a17d0490-cda0-40d9-8db2-8840e6cdedb0",
          "title": "Test Scenario 7: DID URLs with fragments",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Must return HTTP code 200",
              "fullTitle": "Test Scenario 7: DID URLs with fragments Must return HTTP code 200",
              "timedOut": null,
              "duration": 577,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.status).to.eq(200);\n});",
              "err": {},
              "uuid": "7fa24285-f08c-4588-8371-6af684ef613b",
              "parentUUID": "a17d0490-cda0-40d9-8db2-8840e6cdedb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST return HTTP header Content-Type with value application/did+ld+json",
              "fullTitle": "Test Scenario 7: DID URLs with fragments MUST return HTTP header Content-Type with value application/did+ld+json",
              "timedOut": null,
              "duration": 1663,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.headers[\"content-type\"]).to.contain(\"application/did+ld+json\");\n});",
              "err": {},
              "uuid": "6151675c-7a77-483b-858a-6c88f1688ad3",
              "parentUUID": "a17d0490-cda0-40d9-8db2-8840e6cdedb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "JSON object MUST NOT contain property didDocument",
              "fullTitle": "Test Scenario 7: DID URLs with fragments JSON object MUST NOT contain property didDocument",
              "timedOut": null,
              "duration": 685,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.body).not.to.have.property(\"didDocument\");\n});",
              "err": {},
              "uuid": "9d2e4437-b908-48bd-a1e8-118660a9a956",
              "parentUUID": "a17d0490-cda0-40d9-8db2-8840e6cdedb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "JSON object MUST contain property @context",
              "fullTitle": "Test Scenario 7: DID URLs with fragments JSON object MUST contain property @context",
              "timedOut": null,
              "duration": 1725,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.body).to.have.property(\"@context\");\n});",
              "err": {},
              "uuid": "26604e2d-1b72-4991-b599-94d2edc5d025",
              "parentUUID": "a17d0490-cda0-40d9-8db2-8840e6cdedb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "JSON object MUST contain property type",
              "fullTitle": "Test Scenario 7: DID URLs with fragments JSON object MUST contain property type",
              "timedOut": null,
              "duration": 757,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.body).to.have.property(\"type\");\n});",
              "err": {},
              "uuid": "3b46dcf9-9574-4559-ace7-d8f146d58fc2",
              "parentUUID": "a17d0490-cda0-40d9-8db2-8840e6cdedb0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "JSON object MUST contain property id with value application/did+ld+json",
              "fullTitle": "Test Scenario 7: DID URLs with fragments JSON object MUST contain property id with value application/did+ld+json",
              "timedOut": null,
              "duration": 710,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.body).to.have.property(\"id\");\n  expect(response.body[\"id\"]).to.contain(\"did:sov:WRfXPg8dantKVubE3HX8pw#key-1\");\n});",
              "err": {},
              "uuid": "6bb8c95d-4ac1-4974-b418-2e1ecb185926",
              "parentUUID": "a17d0490-cda0-40d9-8db2-8840e6cdedb0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7fa24285-f08c-4588-8371-6af684ef613b",
            "6151675c-7a77-483b-858a-6c88f1688ad3",
            "9d2e4437-b908-48bd-a1e8-118660a9a956",
            "26604e2d-1b72-4991-b599-94d2edc5d025",
            "3b46dcf9-9574-4559-ace7-d8f146d58fc2",
            "6bb8c95d-4ac1-4974-b418-2e1ecb185926"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6117,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "7cf207a4-2472-4ad0-a0ce-0843ac004870",
      "title": "",
      "fullFile": "cypress/integration/uniresolver_fixtures_spec.js",
      "file": "cypress/integration/uniresolver_fixtures_spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5e99442d-6703-4b10-844a-ad1eb93da24f",
          "title": "Test Scenario 1: DID Resolution Result fixtures: undefined",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A correct DID can be resolved",
              "fullTitle": "Test Scenario 1: DID Resolution Result fixtures: undefined A correct DID can be resolved",
              "timedOut": null,
              "duration": 50,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"normalDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const normalDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + normalDid\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      expect(response.status).to.eq(200);\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution');\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.body).to.have.property(\"didDocument\");\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.body).to.have.property(\"didResolutionMetadata\");\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.body).to.have.property(\"didDocumentMetadata\");\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:40333/__cypress/runner/cypress_runner.js:160445:78)\nFrom Your Spec Code:\n    at eval (http://localhost:40333/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:107:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:40333/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:105:27)",
                "diff": null
              },
              "uuid": "0ba064df-0441-461b-8434-4339f3939c98",
              "parentUUID": "5e99442d-6703-4b10-844a-ad1eb93da24f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "0ba064df-0441-461b-8434-4339f3939c98"
          ],
          "pending": [],
          "skipped": [],
          "duration": 50,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fb3eb257-5984-4644-aa95-77a843f81a0d",
          "title": "Test Scenario 2: JSON-LD DID document",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A correct DID can be resolved with header input",
              "fullTitle": "Test Scenario 2: JSON-LD DID document A correct DID can be resolved with header input",
              "timedOut": null,
              "duration": 21,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"normalDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const normalDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + normalDid,\n      headers: {\n        Accept: \"application/did+ld+json\"\n      }\n    }).as(\"headers\");\n    cy.get(\"@headers\").then(response => {\n      expect(response.status).to.eq(200);\n      expect(response.headers[\"content-type\"]).to.contain(\"application/did+ld+json\");\n      expect(response.body).not.to.have.property(\"didDocument\");\n      expect(response.body).to.have.property(\"@context\");\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:40333/__cypress/runner/cypress_runner.js:160445:78)\nFrom Your Spec Code:\n    at eval (http://localhost:40333/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:138:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:40333/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:136:27)",
                "diff": null
              },
              "uuid": "7f6a1392-423e-418a-9a64-dea676b58dc2",
              "parentUUID": "fb3eb257-5984-4644-aa95-77a843f81a0d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "7f6a1392-423e-418a-9a64-dea676b58dc2"
          ],
          "pending": [],
          "skipped": [],
          "duration": 21,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0b8a2667-e553-4370-9ded-82e82528241f",
          "title": "Test Scenario 3: Representation not supported",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Shows an error when a representation is prompted",
              "fullTitle": "Test Scenario 3: Representation not supported Shows an error when a representation is prompted",
              "timedOut": null,
              "duration": 15,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"normalDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const normalDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + normalDid,\n      headers: {\n        Accept: \"image/png\"\n      },\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(406);\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:40333/__cypress/runner/cypress_runner.js:160445:78)\nFrom Your Spec Code:\n    at eval (http://localhost:40333/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:163:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:40333/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:161:27)",
                "diff": null
              },
              "uuid": "3b6746d4-2ae7-496a-b722-181d1fab29d2",
              "parentUUID": "0b8a2667-e553-4370-9ded-82e82528241f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "3b6746d4-2ae7-496a-b722-181d1fab29d2"
          ],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7502802e-5ee9-4768-96fb-ca9c3823ec81",
          "title": "Test Scenario 4: Deactivated",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Returns an HTTP code of 410 for deactivated DIDs",
              "fullTitle": "Test Scenario 4: Deactivated Returns an HTTP code of 410 for deactivated DIDs",
              "timedOut": null,
              "duration": 15,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"deacDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const deacDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + deacDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(410);\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"'); //FAILS\n      expect(response.body.didDocumentMetadata.deactivated).to.eq(true);\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:40333/__cypress/runner/cypress_runner.js:160445:78)\nFrom Your Spec Code:\n    at eval (http://localhost:40333/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:185:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:40333/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:183:27)",
                "diff": null
              },
              "uuid": "dfbbc0c1-eb5b-4dfa-bd8c-d5295a292c43",
              "parentUUID": "7502802e-5ee9-4768-96fb-ca9c3823ec81",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "dfbbc0c1-eb5b-4dfa-bd8c-d5295a292c43"
          ],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7e4df090-a841-426a-b6fb-6716ec28fc1b",
          "title": "Test Scenario 5: Not found",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Returns an HTTP code of 404 for non-existent DIDs",
              "fullTitle": "Test Scenario 5: Not found Returns an HTTP code of 404 for non-existent DIDs",
              "timedOut": null,
              "duration": 13,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"nonExisDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const nonExDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + nonExDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(404);\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n      expect(response.body.didResolutionMetadata.error).to.eq(\"notFound\");\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:40333/__cypress/runner/cypress_runner.js:160445:78)\nFrom Your Spec Code:\n    at eval (http://localhost:40333/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:207:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:40333/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:205:27)",
                "diff": null
              },
              "uuid": "dc2459b4-3477-4c31-a461-772d9b375df2",
              "parentUUID": "7e4df090-a841-426a-b6fb-6716ec28fc1b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "dc2459b4-3477-4c31-a461-772d9b375df2"
          ],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d3866e02-23f4-4c4c-8fc6-e4f62eafb39e",
          "title": "Test Scenario 6: Invalid DID",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Returns a HTTP code of 400 for an invalid DID",
              "fullTitle": "Test Scenario 6: Invalid DID Returns a HTTP code of 400 for an invalid DID",
              "timedOut": null,
              "duration": 13,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"invalidDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const invalidDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + invalidDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(400);\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n      expect(response.body.didResolutionMetadata.error).to.eq(\"invalidDid\");\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:40333/__cypress/runner/cypress_runner.js:160445:78)\nFrom Your Spec Code:\n    at eval (http://localhost:40333/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:228:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:40333/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:226:27)",
                "diff": null
              },
              "uuid": "cf8765e8-9b1f-436f-934e-83b1a4e00315",
              "parentUUID": "d3866e02-23f4-4c4c-8fc6-e4f62eafb39e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "cf8765e8-9b1f-436f-934e-83b1a4e00315"
          ],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cf5ed6ec-bce8-4b82-900f-9caa0eb3db2b",
          "title": "Test Scenario 7: DID URLs with fragments",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Can resolve a DID with a fragment",
              "fullTitle": "Test Scenario 7: DID URLs with fragments Can resolve a DID with a fragment",
              "timedOut": null,
              "duration": 16,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"fragmentDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const fragmentDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + fragmentDid,\n      failOnStatusCode: false,\n      headers: {\n        Accept: \"application/did+ld+json\"\n      }\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      console.log(response);\n      expect(response.status).to.eq(200);\n      expect(response.headers[\"content-type\"]).to.contain(\"application/did+ld+json\");\n      expect(response.body).not.to.have.property(\"didDocument\");\n      expect(response.body).to.have.property(\"@context\");\n      expect(response.body).to.have.property(\"type\");\n      expect(response.body).to.have.property(\"id\");\n      expect(response.body[\"id\"]).to.contain(decodeURIComponent(fragmentDid.split(\"#\")[0]));\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:40333/__cypress/runner/cypress_runner.js:160434:78)\nFrom Your Spec Code:\n    at eval (http://localhost:40333/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:249:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:40333/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:247:27)",
                "diff": null
              },
              "uuid": "1ce53de6-9714-4d63-9832-4bfc1002c2e9",
              "parentUUID": "cf5ed6ec-bce8-4b82-900f-9caa0eb3db2b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1ce53de6-9714-4d63-9832-4bfc1002c2e9"
          ],
          "pending": [],
          "skipped": [],
          "duration": 16,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.2"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mocha",
        "configFile": "reporterOpts.json",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.1.1"
    }
  }
}