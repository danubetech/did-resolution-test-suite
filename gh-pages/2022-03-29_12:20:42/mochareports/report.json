{
  "stats": {
    "suites": 2,
    "tests": 32,
    "passes": 18,
    "pending": 0,
    "failures": 14,
    "start": "2022-03-29T12:20:12.095Z",
    "end": "2022-03-29T12:20:38.615Z",
    "duration": 24334,
    "testsRegistered": 32,
    "passPercent": 56.25,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "baf0f279-7245-46c9-99d5-887f57804c96",
      "title": "",
      "fullFile": "cypress/integration/resolver_spec.js",
      "file": "cypress/integration/resolver_spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e8d38c46-7685-4608-bd49-aeea0f06f98b",
          "title": "Test Scenario 1: DID Resolution Result overview: https://api.godiddy.com/0.1.0/universal-resolver/identifiers/",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP code 200",
              "fullTitle": "Test Scenario 1: DID Resolution Result overview: https://api.godiddy.com/0.1.0/universal-resolver/identifiers/ MUST return HTTP code 200",
              "timedOut": null,
              "duration": 2346,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@request\").then(response => {\n  expect(response.status).to.eq(200);\n});",
              "err": {},
              "uuid": "bf21f47d-462d-48f0-b7df-48ce48eb3c5e",
              "parentUUID": "e8d38c46-7685-4608-bd49-aeea0f06f98b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should have header with Content-Type with value application/ld+json;profile=\"https://w3id.org/did-resolution\" ",
              "fullTitle": "Test Scenario 1: DID Resolution Result overview: https://api.godiddy.com/0.1.0/universal-resolver/identifiers/ Should have header with Content-Type with value application/ld+json;profile=\"https://w3id.org/did-resolution\" ",
              "timedOut": null,
              "duration": 754,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@request\").then(response => {\n  expect(response.headers[\"content-type\"]).to.contain('application/ld+json; profile=\"https://w3id.org/did-resolution');\n});",
              "err": {},
              "uuid": "8d87ceba-c41b-4d6b-ac46-43ac2c98046c",
              "parentUUID": "e8d38c46-7685-4608-bd49-aeea0f06f98b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Must contain property didDocument",
              "fullTitle": "Test Scenario 1: DID Resolution Result overview: https://api.godiddy.com/0.1.0/universal-resolver/identifiers/ Must contain property didDocument",
              "timedOut": null,
              "duration": 1723,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@request\").then(response => {\n  expect(response.body).to.have.property(\"didDocument\");\n});",
              "err": {},
              "uuid": "c31fcdbc-cc4b-46fe-b339-4686f3059e5a",
              "parentUUID": "e8d38c46-7685-4608-bd49-aeea0f06f98b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Must contain property didResolutionMetadata",
              "fullTitle": "Test Scenario 1: DID Resolution Result overview: https://api.godiddy.com/0.1.0/universal-resolver/identifiers/ Must contain property didResolutionMetadata",
              "timedOut": null,
              "duration": 705,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@request\").then(response => {\n  expect(response.body).to.have.property(\"didResolutionMetadata\");\n});",
              "err": {},
              "uuid": "2b5dfc4a-7343-4526-bd7b-92e52361d4ac",
              "parentUUID": "e8d38c46-7685-4608-bd49-aeea0f06f98b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Must contain property didDocumentMetadata",
              "fullTitle": "Test Scenario 1: DID Resolution Result overview: https://api.godiddy.com/0.1.0/universal-resolver/identifiers/ Must contain property didDocumentMetadata",
              "timedOut": null,
              "duration": 724,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@request\").then(response => {\n  expect(response.body).to.have.property(\"didDocumentMetadata\");\n});",
              "err": {},
              "uuid": "391487e5-92c6-44df-a5da-94f870925036",
              "parentUUID": "e8d38c46-7685-4608-bd49-aeea0f06f98b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bf21f47d-462d-48f0-b7df-48ce48eb3c5e",
            "8d87ceba-c41b-4d6b-ac46-43ac2c98046c",
            "c31fcdbc-cc4b-46fe-b339-4686f3059e5a",
            "2b5dfc4a-7343-4526-bd7b-92e52361d4ac",
            "391487e5-92c6-44df-a5da-94f870925036"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6252,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fb4d7578-ffcf-4b63-a213-3ff3d04204b7",
          "title": "Test Scenario 2: JSON-LD DID document",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should have response status 200",
              "fullTitle": "Test Scenario 2: JSON-LD DID document Should have response status 200",
              "timedOut": null,
              "duration": 1489,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.status).to.eq(200);\n});",
              "err": {},
              "uuid": "74742183-b194-454b-8aae-644231a7d613",
              "parentUUID": "fb4d7578-ffcf-4b63-a213-3ff3d04204b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should have header with content type",
              "fullTitle": "Test Scenario 2: JSON-LD DID document Should have header with content type",
              "timedOut": null,
              "duration": 603,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.headers[\"content-type\"]).to.contain(\"application/did+ld+json\");\n});",
              "err": {},
              "uuid": "c148fdd9-30e5-49bb-bd0a-5b12df358e48",
              "parentUUID": "fb4d7578-ffcf-4b63-a213-3ff3d04204b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not have property didDocument",
              "fullTitle": "Test Scenario 2: JSON-LD DID document Should not have property didDocument",
              "timedOut": null,
              "duration": 2478,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.body).not.to.have.property(\"didDocument\");\n});",
              "err": {},
              "uuid": "178d9af1-e11b-4bc7-b7e4-76fdbc582b72",
              "parentUUID": "fb4d7578-ffcf-4b63-a213-3ff3d04204b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should have property @context",
              "fullTitle": "Test Scenario 2: JSON-LD DID document Should have property @context",
              "timedOut": null,
              "duration": 930,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.body).to.have.property(\"@context\");\n});",
              "err": {},
              "uuid": "66422a88-0cad-43e7-8883-056db9f979dc",
              "parentUUID": "fb4d7578-ffcf-4b63-a213-3ff3d04204b7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "74742183-b194-454b-8aae-644231a7d613",
            "c148fdd9-30e5-49bb-bd0a-5b12df358e48",
            "178d9af1-e11b-4bc7-b7e4-76fdbc582b72",
            "66422a88-0cad-43e7-8883-056db9f979dc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5500,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dbacb97b-2eeb-4db0-9d74-67c8812b2c2f",
          "title": "Test Scenario 3: Representation not supported",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP code 406",
              "fullTitle": "Test Scenario 3: Representation not supported MUST return HTTP code 406",
              "timedOut": null,
              "duration": 206,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:WRfXPg8dantKVubE3HX8pw\",\n  failOnStatusCode: false,\n  headers: {\n    Accept: \"image/png\"\n  }\n}).then(response => {\n  expect(response.status).to.eq(406);\n});",
              "err": {},
              "uuid": "85329fdb-a6d6-4ba7-9918-47e8635fd02d",
              "parentUUID": "dbacb97b-2eeb-4db0-9d74-67c8812b2c2f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "85329fdb-a6d6-4ba7-9918-47e8635fd02d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 206,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5eb316fb-1150-4c1a-b049-fb1386b219a8",
          "title": "Test Scenario 4: Deactivated",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP code 410",
              "fullTitle": "Test Scenario 4: Deactivated MUST return HTTP code 410",
              "timedOut": null,
              "duration": 220,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:kilt:4r6RdVMNes2eEobxyxH7aVsesUqR2X175sUAXJfo7dEWxHUS\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(410);\n});",
              "err": {
                "message": "AssertionError: expected 404 to equal 410",
                "estack": "AssertionError: expected 404 to equal 410\n    at Context.eval (http://localhost:40771/__cypress/tests?p=cypress/integration/resolver_spec.js:197:36)",
                "diff": "- 404\n+ 410\n"
              },
              "uuid": "ea750f84-fb65-4cb7-a9ab-c8aeeb3e7d77",
              "parentUUID": "5eb316fb-1150-4c1a-b049-fb1386b219a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST return HTTP header Content-Type",
              "fullTitle": "Test Scenario 4: Deactivated MUST return HTTP header Content-Type",
              "timedOut": null,
              "duration": 218,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:kilt:4r6RdVMNes2eEobxyxH7aVsesUqR2X175sUAXJfo7dEWxHUS\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n});",
              "err": {
                "message": "AssertionError: expected 'text/plain;charset=UTF-8' to include 'application/ld+json;profile=\"https://w3id.org/did-resolution\"'",
                "estack": "AssertionError: expected 'text/plain;charset=UTF-8' to include 'application/ld+json;profile=\"https://w3id.org/did-resolution\"'\n    at Context.eval (http://localhost:40771/__cypress/tests?p=cypress/integration/resolver_spec.js:206:53)",
                "diff": null
              },
              "uuid": "bb6d42af-4994-4257-b13f-ae394e59b822",
              "parentUUID": "5eb316fb-1150-4c1a-b049-fb1386b219a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "JSON object MUST contain property didDocumentMetadata.deactivated = true",
              "fullTitle": "Test Scenario 4: Deactivated JSON object MUST contain property didDocumentMetadata.deactivated = true",
              "timedOut": null,
              "duration": 212,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:kilt:4r6RdVMNes2eEobxyxH7aVsesUqR2X175sUAXJfo7dEWxHUS\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.body.didDocumentMetadata.deactivated).to.eq(true);\n});",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'deactivated')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'deactivated')\n    at Context.eval (http://localhost:40771/__cypress/tests?p=cypress/integration/resolver_spec.js:215:50)",
                "diff": null
              },
              "uuid": "f6385672-7357-4569-b351-c4f860160389",
              "parentUUID": "5eb316fb-1150-4c1a-b049-fb1386b219a8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "ea750f84-fb65-4cb7-a9ab-c8aeeb3e7d77",
            "bb6d42af-4994-4257-b13f-ae394e59b822",
            "f6385672-7357-4569-b351-c4f860160389"
          ],
          "pending": [],
          "skipped": [],
          "duration": 650,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dd32f670-8de1-46f5-bd3e-839739f62f53",
          "title": "Test Scenario 5: Not found",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP code 404",
              "fullTitle": "Test Scenario 5: Not found MUST return HTTP code 404",
              "timedOut": null,
              "duration": 220,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:0000000000000000000000\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n});",
              "err": {},
              "uuid": "a08ccf4a-e855-485a-9dbc-180f9452a56d",
              "parentUUID": "dd32f670-8de1-46f5-bd3e-839739f62f53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST return HTTP header Content-Type with value application/ld+json;profile=\"https://w3id.org/did-resolution\"",
              "fullTitle": "Test Scenario 5: Not found MUST return HTTP header Content-Type with value application/ld+json;profile=\"https://w3id.org/did-resolution\"",
              "timedOut": null,
              "duration": 192,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:0000000000000000000000\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n});",
              "err": {
                "message": "AssertionError: expected 'text/plain;charset=UTF-8' to include 'application/ld+json;profile=\"https://w3id.org/did-resolution\"'",
                "estack": "AssertionError: expected 'text/plain;charset=UTF-8' to include 'application/ld+json;profile=\"https://w3id.org/did-resolution\"'\n    at Context.eval (http://localhost:40771/__cypress/tests?p=cypress/integration/resolver_spec.js:238:53)",
                "diff": null
              },
              "uuid": "754d29f2-7285-43ac-926a-a39a8ecf3897",
              "parentUUID": "dd32f670-8de1-46f5-bd3e-839739f62f53",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "JSON object MUST contain property didResolutionMetadata.error = \"notFound\"",
              "fullTitle": "Test Scenario 5: Not found JSON object MUST contain property didResolutionMetadata.error = \"notFound\"",
              "timedOut": null,
              "duration": 608,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"https://dev.uniresolver.io/1.0/identifiers/did:sov:0000000000000000000000\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.body.didResolutionMetadata.error).to.eq(\"notFound\");\n});",
              "err": {},
              "uuid": "2373c3e1-05d9-44d2-8aa3-6d76a01ae99a",
              "parentUUID": "dd32f670-8de1-46f5-bd3e-839739f62f53",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a08ccf4a-e855-485a-9dbc-180f9452a56d",
            "2373c3e1-05d9-44d2-8aa3-6d76a01ae99a"
          ],
          "failures": [
            "754d29f2-7285-43ac-926a-a39a8ecf3897"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1020,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9aaa6234-440a-4d2d-b92b-0c4e5ce40ba9",
          "title": "Test Scenario 6: Invalid DID",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP code 400",
              "fullTitle": "Test Scenario 6: Invalid DID MUST return HTTP code 400",
              "timedOut": null,
              "duration": 214,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:example_222\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400);\n});",
              "err": {
                "message": "AssertionError: expected 500 to equal 400",
                "estack": "AssertionError: expected 500 to equal 400\n    at Context.eval (http://localhost:40771/__cypress/tests?p=cypress/integration/resolver_spec.js:261:36)",
                "diff": "- 500\n+ 400\n"
              },
              "uuid": "15bbcb9f-410b-483e-a033-caf265ce920c",
              "parentUUID": "9aaa6234-440a-4d2d-b92b-0c4e5ce40ba9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST return HTTP header Content-Type with value application/ld+json;profile=\"https://w3id.org/did-resolution\"",
              "fullTitle": "Test Scenario 6: Invalid DID MUST return HTTP header Content-Type with value application/ld+json;profile=\"https://w3id.org/did-resolution\"",
              "timedOut": null,
              "duration": 215,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:example_222\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n});",
              "err": {
                "message": "AssertionError: expected 'text/plain;charset=UTF-8' to include 'application/ld+json;profile=\"https://w3id.org/did-resolution\"'",
                "estack": "AssertionError: expected 'text/plain;charset=UTF-8' to include 'application/ld+json;profile=\"https://w3id.org/did-resolution\"'\n    at Context.eval (http://localhost:40771/__cypress/tests?p=cypress/integration/resolver_spec.js:270:53)",
                "diff": null
              },
              "uuid": "ed0c68be-f5cf-4d0d-88e3-934e1b634a10",
              "parentUUID": "9aaa6234-440a-4d2d-b92b-0c4e5ce40ba9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "JSON object MUST contain property didResolutionMetadata.error = \"invalidDid\"",
              "fullTitle": "Test Scenario 6: Invalid DID JSON object MUST contain property didResolutionMetadata.error = \"invalidDid\"",
              "timedOut": null,
              "duration": 244,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:example_222\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.body.didResolutionMetadata.error).to.eq(\"invalidDid\");\n});",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'error')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'error')\n    at Context.eval (http://localhost:40771/__cypress/tests?p=cypress/integration/resolver_spec.js:279:52)",
                "diff": null
              },
              "uuid": "2311a602-3295-4e7a-888b-f32f2e675c99",
              "parentUUID": "9aaa6234-440a-4d2d-b92b-0c4e5ce40ba9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "15bbcb9f-410b-483e-a033-caf265ce920c",
            "ed0c68be-f5cf-4d0d-88e3-934e1b634a10",
            "2311a602-3295-4e7a-888b-f32f2e675c99"
          ],
          "pending": [],
          "skipped": [],
          "duration": 673,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "12b6ba07-4c57-4bca-9185-33a77abcc4ca",
          "title": "Test Scenario 7: DID URLs with fragments",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Must return HTTP code 200",
              "fullTitle": "Test Scenario 7: DID URLs with fragments Must return HTTP code 200",
              "timedOut": null,
              "duration": 1939,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.status).to.eq(200);\n});",
              "err": {},
              "uuid": "0efaee36-822f-463b-8cfd-0a9e681faed1",
              "parentUUID": "12b6ba07-4c57-4bca-9185-33a77abcc4ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST return HTTP header Content-Type with value application/did+ld+json",
              "fullTitle": "Test Scenario 7: DID URLs with fragments MUST return HTTP header Content-Type with value application/did+ld+json",
              "timedOut": null,
              "duration": 795,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.headers[\"content-type\"]).to.contain(\"application/did+ld+json\");\n});",
              "err": {},
              "uuid": "f87e8d05-82bc-4ab8-8268-9f2086c5f8c4",
              "parentUUID": "12b6ba07-4c57-4bca-9185-33a77abcc4ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "JSON object MUST NOT contain property didDocument",
              "fullTitle": "Test Scenario 7: DID URLs with fragments JSON object MUST NOT contain property didDocument",
              "timedOut": null,
              "duration": 2514,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.body).not.to.have.property(\"didDocument\");\n});",
              "err": {},
              "uuid": "76dfa500-0c6a-44a7-b7c9-e38ff4476b59",
              "parentUUID": "12b6ba07-4c57-4bca-9185-33a77abcc4ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "JSON object MUST contain property @context",
              "fullTitle": "Test Scenario 7: DID URLs with fragments JSON object MUST contain property @context",
              "timedOut": null,
              "duration": 905,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.body).to.have.property(\"@context\");\n});",
              "err": {},
              "uuid": "e60da98f-ca41-4d0c-8d66-d70579613ed7",
              "parentUUID": "12b6ba07-4c57-4bca-9185-33a77abcc4ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "JSON object MUST contain property type",
              "fullTitle": "Test Scenario 7: DID URLs with fragments JSON object MUST contain property type",
              "timedOut": null,
              "duration": 908,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.body).to.have.property(\"type\");\n});",
              "err": {},
              "uuid": "adbc0201-6049-47a2-a937-64fb913a96b6",
              "parentUUID": "12b6ba07-4c57-4bca-9185-33a77abcc4ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "JSON object MUST contain property id with value application/did+ld+json",
              "fullTitle": "Test Scenario 7: DID URLs with fragments JSON object MUST contain property id with value application/did+ld+json",
              "timedOut": null,
              "duration": 2810,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.body).to.have.property(\"id\");\n  expect(response.body[\"id\"]).to.contain(\"did:sov:WRfXPg8dantKVubE3HX8pw#key-1\");\n});",
              "err": {},
              "uuid": "f2ba47c7-102c-4c0d-ab7f-4c3b907ff4e9",
              "parentUUID": "12b6ba07-4c57-4bca-9185-33a77abcc4ca",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0efaee36-822f-463b-8cfd-0a9e681faed1",
            "f87e8d05-82bc-4ab8-8268-9f2086c5f8c4",
            "76dfa500-0c6a-44a7-b7c9-e38ff4476b59",
            "e60da98f-ca41-4d0c-8d66-d70579613ed7",
            "adbc0201-6049-47a2-a937-64fb913a96b6",
            "f2ba47c7-102c-4c0d-ab7f-4c3b907ff4e9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9871,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "b073a084-f0ce-4e19-a8e6-a8ba89efae5d",
      "title": "",
      "fullFile": "cypress/integration/uniresolver_fixtures_spec.js",
      "file": "cypress/integration/uniresolver_fixtures_spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "49f746e4-d650-4d57-90c8-9cb52a0d1f3c",
          "title": "Test Scenario 1: DID Resolution Result fixtures: undefined",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A correct DID can be resolved",
              "fullTitle": "Test Scenario 1: DID Resolution Result fixtures: undefined A correct DID can be resolved",
              "timedOut": null,
              "duration": 54,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"normalDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const normalDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + normalDid\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      expect(response.status).to.eq(200);\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution');\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.body).to.have.property(\"didDocument\");\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.body).to.have.property(\"didResolutionMetadata\");\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.body).to.have.property(\"didDocumentMetadata\");\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:40771/__cypress/runner/cypress_runner.js:160445:78)\nFrom Your Spec Code:\n    at eval (http://localhost:40771/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:107:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:40771/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:105:27)",
                "diff": null
              },
              "uuid": "92cee2ee-06bf-4b71-a50d-57ff0b9d9784",
              "parentUUID": "49f746e4-d650-4d57-90c8-9cb52a0d1f3c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "92cee2ee-06bf-4b71-a50d-57ff0b9d9784"
          ],
          "pending": [],
          "skipped": [],
          "duration": 54,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a08f8bb3-f4b7-48f4-afed-1cd59e53fb74",
          "title": "Test Scenario 2: JSON-LD DID document",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A correct DID can be resolved with header input",
              "fullTitle": "Test Scenario 2: JSON-LD DID document A correct DID can be resolved with header input",
              "timedOut": null,
              "duration": 25,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"normalDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const normalDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + normalDid,\n      headers: {\n        Accept: \"application/did+ld+json\"\n      }\n    }).as(\"headers\");\n    cy.get(\"@headers\").then(response => {\n      expect(response.status).to.eq(200);\n      expect(response.headers[\"content-type\"]).to.contain(\"application/did+ld+json\");\n      expect(response.body).not.to.have.property(\"didDocument\");\n      expect(response.body).to.have.property(\"@context\");\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:40771/__cypress/runner/cypress_runner.js:160445:78)\nFrom Your Spec Code:\n    at eval (http://localhost:40771/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:138:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:40771/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:136:27)",
                "diff": null
              },
              "uuid": "529c6610-8f22-42e4-9597-b2e343e26f09",
              "parentUUID": "a08f8bb3-f4b7-48f4-afed-1cd59e53fb74",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "529c6610-8f22-42e4-9597-b2e343e26f09"
          ],
          "pending": [],
          "skipped": [],
          "duration": 25,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0d5a600c-74de-4b1c-a28d-e2bcef332792",
          "title": "Test Scenario 3: Representation not supported",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Shows an error when a representation is prompted",
              "fullTitle": "Test Scenario 3: Representation not supported Shows an error when a representation is prompted",
              "timedOut": null,
              "duration": 16,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"normalDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const normalDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + normalDid,\n      headers: {\n        Accept: \"image/png\"\n      },\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(406);\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:40771/__cypress/runner/cypress_runner.js:160445:78)\nFrom Your Spec Code:\n    at eval (http://localhost:40771/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:163:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:40771/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:161:27)",
                "diff": null
              },
              "uuid": "b3791921-1b5f-4ae4-874b-1e9f3b50625f",
              "parentUUID": "0d5a600c-74de-4b1c-a28d-e2bcef332792",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b3791921-1b5f-4ae4-874b-1e9f3b50625f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 16,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "956f55bd-cbb9-45b7-96e7-6d4eb65cc8e6",
          "title": "Test Scenario 4: Deactivated",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Returns an HTTP code of 410 for deactivated DIDs",
              "fullTitle": "Test Scenario 4: Deactivated Returns an HTTP code of 410 for deactivated DIDs",
              "timedOut": null,
              "duration": 17,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"deacDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const deacDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + deacDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(410);\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"'); //FAILS\n      expect(response.body.didDocumentMetadata.deactivated).to.eq(true);\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:40771/__cypress/runner/cypress_runner.js:160445:78)\nFrom Your Spec Code:\n    at eval (http://localhost:40771/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:185:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:40771/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:183:27)",
                "diff": null
              },
              "uuid": "5afc0745-f1c6-4da0-acef-ec8909315816",
              "parentUUID": "956f55bd-cbb9-45b7-96e7-6d4eb65cc8e6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "5afc0745-f1c6-4da0-acef-ec8909315816"
          ],
          "pending": [],
          "skipped": [],
          "duration": 17,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a4dae02a-ba2e-44ac-841f-9ddda4865b24",
          "title": "Test Scenario 5: Not found",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Returns an HTTP code of 404 for non-existent DIDs",
              "fullTitle": "Test Scenario 5: Not found Returns an HTTP code of 404 for non-existent DIDs",
              "timedOut": null,
              "duration": 15,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"nonExisDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const nonExDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + nonExDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(404);\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n      expect(response.body.didResolutionMetadata.error).to.eq(\"notFound\");\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:40771/__cypress/runner/cypress_runner.js:160445:78)\nFrom Your Spec Code:\n    at eval (http://localhost:40771/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:207:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:40771/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:205:27)",
                "diff": null
              },
              "uuid": "e115a41b-c199-4fca-bf0a-cfd506a4d18b",
              "parentUUID": "a4dae02a-ba2e-44ac-841f-9ddda4865b24",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e115a41b-c199-4fca-bf0a-cfd506a4d18b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7abf9f93-601b-4d9d-8bb0-287c4fdd48e4",
          "title": "Test Scenario 6: Invalid DID",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Returns a HTTP code of 400 for an invalid DID",
              "fullTitle": "Test Scenario 6: Invalid DID Returns a HTTP code of 400 for an invalid DID",
              "timedOut": null,
              "duration": 15,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"invalidDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const invalidDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + invalidDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(400);\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n      expect(response.body.didResolutionMetadata.error).to.eq(\"invalidDid\");\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:40771/__cypress/runner/cypress_runner.js:160445:78)\nFrom Your Spec Code:\n    at eval (http://localhost:40771/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:228:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:40771/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:226:27)",
                "diff": null
              },
              "uuid": "f76d81e3-2a03-4f0e-9cf3-cfe9cb2bd6a5",
              "parentUUID": "7abf9f93-601b-4d9d-8bb0-287c4fdd48e4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f76d81e3-2a03-4f0e-9cf3-cfe9cb2bd6a5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "59a1862c-76d2-492c-92ed-a4c7753a2537",
          "title": "Test Scenario 7: DID URLs with fragments",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Can resolve a DID with a fragment",
              "fullTitle": "Test Scenario 7: DID URLs with fragments Can resolve a DID with a fragment",
              "timedOut": null,
              "duration": 20,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"fragmentDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const fragmentDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + fragmentDid,\n      failOnStatusCode: false,\n      headers: {\n        Accept: \"application/did+ld+json\"\n      }\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      console.log(response);\n      expect(response.status).to.eq(200);\n      expect(response.headers[\"content-type\"]).to.contain(\"application/did+ld+json\");\n      expect(response.body).not.to.have.property(\"didDocument\");\n      expect(response.body).to.have.property(\"@context\");\n      expect(response.body).to.have.property(\"type\");\n      expect(response.body).to.have.property(\"id\");\n      expect(response.body[\"id\"]).to.contain(decodeURIComponent(fragmentDid.split(\"#\")[0]));\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:40771/__cypress/runner/cypress_runner.js:160434:78)\nFrom Your Spec Code:\n    at eval (http://localhost:40771/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:249:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:40771/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:247:27)",
                "diff": null
              },
              "uuid": "c156c759-2508-4615-9524-b9461ded5045",
              "parentUUID": "59a1862c-76d2-492c-92ed-a4c7753a2537",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "c156c759-2508-4615-9524-b9461ded5045"
          ],
          "pending": [],
          "skipped": [],
          "duration": 20,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.2"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mocha",
        "configFile": "reporterOpts.json",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.1.1"
    }
  }
}