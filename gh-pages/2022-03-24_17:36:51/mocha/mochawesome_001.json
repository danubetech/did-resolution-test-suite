{
  "stats": {
    "suites": 7,
    "tests": 7,
    "passes": 0,
    "pending": 0,
    "failures": 7,
    "start": "2022-03-24T17:36:46.699Z",
    "end": "2022-03-24T17:36:47.034Z",
    "duration": 335,
    "testsRegistered": 7,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9557cc80-d0af-4da4-8101-933e76a53a11",
      "title": "",
      "fullFile": "cypress/integration/uniresolver_fixtures_spec.js",
      "file": "cypress/integration/uniresolver_fixtures_spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5723a245-87bc-490c-9ceb-d55a920a8994",
          "title": "Test Scenario 1: DID Resolution Result fixtures: undefined",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A correct DID can be resolved",
              "fullTitle": "Test Scenario 1: DID Resolution Result fixtures: undefined A correct DID can be resolved",
              "timedOut": null,
              "duration": 54,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"normalDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const normalDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + normalDid\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      expect(response.status).to.eq(200);\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution');\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.body).to.have.property(\"didDocument\");\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.body).to.have.property(\"didResolutionMetadata\");\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.body).to.have.property(\"didDocumentMetadata\");\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:34225/__cypress/runner/cypress_runner.js:160445:78)\nFrom Your Spec Code:\n    at eval (http://localhost:34225/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:107:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:34225/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:105:27)",
                "diff": null
              },
              "uuid": "d0f71708-e9da-4cc2-af7f-aa466a54134e",
              "parentUUID": "5723a245-87bc-490c-9ceb-d55a920a8994",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "d0f71708-e9da-4cc2-af7f-aa466a54134e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 54,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d5fc1f87-e0a6-4eab-879f-12442eb05b00",
          "title": "Test Scenario 2: JSON-LD DID document",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A correct DID can be resolved with header input",
              "fullTitle": "Test Scenario 2: JSON-LD DID document A correct DID can be resolved with header input",
              "timedOut": null,
              "duration": 29,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"normalDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const normalDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + normalDid,\n      headers: {\n        Accept: \"application/did+ld+json\"\n      }\n    }).as(\"headers\");\n    cy.get(\"@headers\").then(response => {\n      expect(response.status).to.eq(200);\n      expect(response.headers[\"content-type\"]).to.contain(\"application/did+ld+json\");\n      expect(response.body).not.to.have.property(\"didDocument\");\n      expect(response.body).to.have.property(\"@context\");\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:34225/__cypress/runner/cypress_runner.js:160445:78)\nFrom Your Spec Code:\n    at eval (http://localhost:34225/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:138:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:34225/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:136:27)",
                "diff": null
              },
              "uuid": "f00e2233-f616-4da9-a7b4-85b6ebb4a4df",
              "parentUUID": "d5fc1f87-e0a6-4eab-879f-12442eb05b00",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f00e2233-f616-4da9-a7b4-85b6ebb4a4df"
          ],
          "pending": [],
          "skipped": [],
          "duration": 29,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a8cfe9fa-a059-49ea-acc5-2b66bac2c2c1",
          "title": "Test Scenario 3: Representation not supported",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Shows an error when a representation is prompted",
              "fullTitle": "Test Scenario 3: Representation not supported Shows an error when a representation is prompted",
              "timedOut": null,
              "duration": 21,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"normalDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const normalDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + normalDid,\n      headers: {\n        Accept: \"image/png\"\n      },\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(406);\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:34225/__cypress/runner/cypress_runner.js:160445:78)\nFrom Your Spec Code:\n    at eval (http://localhost:34225/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:163:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:34225/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:161:27)",
                "diff": null
              },
              "uuid": "d2874fa8-764b-4212-85a5-06b4b15b9829",
              "parentUUID": "a8cfe9fa-a059-49ea-acc5-2b66bac2c2c1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "d2874fa8-764b-4212-85a5-06b4b15b9829"
          ],
          "pending": [],
          "skipped": [],
          "duration": 21,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0f441443-9a4e-4d31-8b43-3934d27cf152",
          "title": "Test Scenario 4: Deactivated",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Returns an HTTP code of 410 for deactivated DIDs",
              "fullTitle": "Test Scenario 4: Deactivated Returns an HTTP code of 410 for deactivated DIDs",
              "timedOut": null,
              "duration": 15,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"deacDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const deacDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + deacDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(410);\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"'); //FAILS\n      expect(response.body.didDocumentMetadata.deactivated).to.eq(true);\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:34225/__cypress/runner/cypress_runner.js:160445:78)\nFrom Your Spec Code:\n    at eval (http://localhost:34225/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:185:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:34225/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:183:27)",
                "diff": null
              },
              "uuid": "636b034d-e6e8-4948-84e1-b818061683f1",
              "parentUUID": "0f441443-9a4e-4d31-8b43-3934d27cf152",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "636b034d-e6e8-4948-84e1-b818061683f1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f7d4bb83-9435-46ca-bf92-feacd57ec1e7",
          "title": "Test Scenario 5: Not found",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Returns an HTTP code of 404 for non-existent DIDs",
              "fullTitle": "Test Scenario 5: Not found Returns an HTTP code of 404 for non-existent DIDs",
              "timedOut": null,
              "duration": 15,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"nonExisDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const nonExDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + nonExDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(404);\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n      expect(response.body.didResolutionMetadata.error).to.eq(\"notFound\");\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:34225/__cypress/runner/cypress_runner.js:160445:78)\nFrom Your Spec Code:\n    at eval (http://localhost:34225/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:207:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:34225/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:205:27)",
                "diff": null
              },
              "uuid": "7d52d198-8c49-4111-8e21-7b59f7e0f674",
              "parentUUID": "f7d4bb83-9435-46ca-bf92-feacd57ec1e7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "7d52d198-8c49-4111-8e21-7b59f7e0f674"
          ],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "964496a3-e745-4222-846b-d3338e10435f",
          "title": "Test Scenario 6: Invalid DID",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Returns a HTTP code of 400 for an invalid DID",
              "fullTitle": "Test Scenario 6: Invalid DID Returns a HTTP code of 400 for an invalid DID",
              "timedOut": null,
              "duration": 17,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"invalidDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const invalidDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + invalidDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(400);\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n      expect(response.body.didResolutionMetadata.error).to.eq(\"invalidDid\");\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:34225/__cypress/runner/cypress_runner.js:160445:78)\nFrom Your Spec Code:\n    at eval (http://localhost:34225/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:228:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:34225/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:226:27)",
                "diff": null
              },
              "uuid": "73b9cbbd-e058-4511-9c28-3e06e230f146",
              "parentUUID": "964496a3-e745-4222-846b-d3338e10435f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "73b9cbbd-e058-4511-9c28-3e06e230f146"
          ],
          "pending": [],
          "skipped": [],
          "duration": 17,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c084fe85-3f39-410b-bbda-3eb8ed8e76b7",
          "title": "Test Scenario 7: DID URLs with fragments",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Can resolve a DID with a fragment",
              "fullTitle": "Test Scenario 7: DID URLs with fragments Can resolve a DID with a fragment",
              "timedOut": null,
              "duration": 14,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"fragmentDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const fragmentDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + fragmentDid,\n      failOnStatusCode: false,\n      headers: {\n        Accept: \"application/did+ld+json\"\n      }\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      console.log(response);\n      expect(response.status).to.eq(200);\n      expect(response.headers[\"content-type\"]).to.contain(\"application/did+ld+json\");\n      expect(response.body).not.to.have.property(\"didDocument\");\n      expect(response.body).to.have.property(\"@context\");\n      expect(response.body).to.have.property(\"type\");\n      expect(response.body).to.have.property(\"id\");\n      expect(response.body[\"id\"]).to.contain(decodeURIComponent(fragmentDid.split(\"#\")[0]));\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:34225/__cypress/runner/cypress_runner.js:160434:78)\nFrom Your Spec Code:\n    at eval (http://localhost:34225/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:249:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:34225/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:247:27)",
                "diff": null
              },
              "uuid": "822aa33b-6651-462e-afb3-568753adb315",
              "parentUUID": "c084fe85-3f39-410b-bbda-3eb8ed8e76b7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "822aa33b-6651-462e-afb3-568753adb315"
          ],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.2"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mocha",
        "configFile": "reporterOpts.json",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.1.1"
    }
  }
}