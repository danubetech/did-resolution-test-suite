{
  "stats": {
    "suites": 11,
    "tests": 11,
    "passes": 4,
    "pending": 0,
    "failures": 7,
    "start": "2022-07-07T00:37:26.040Z",
    "end": "2022-07-07T00:38:13.238Z",
    "duration": 47198,
    "testsRegistered": 11,
    "passPercent": 36.36363636363637,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "40759ef0-35e3-4413-9d10-e95f86eb4405",
      "title": "",
      "fullFile": "cypress/integration/uniresolver_fixtures_spec.js",
      "file": "cypress/integration/uniresolver_fixtures_spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1f82b4ca-42fb-4060-97b3-304637710275",
          "title": "Test Scenario 1: DID Resolution Result fixtures: https://resolver.svip.danubetech.com/1.0/identifiers/",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A correct DID can be resolved",
              "fullTitle": "Test Scenario 1: DID Resolution Result fixtures: https://resolver.svip.danubetech.com/1.0/identifiers/ A correct DID can be resolved",
              "timedOut": null,
              "duration": 8753,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"normalDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const normalDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + normalDid,\n      failOnStatusCode: false\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      expect(response.status).to.eq(200);\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.headers[\"content-type\"].replace(/\\s+/g, \"\")).contains('application/ld+json;profile=\"https://w3id.org/did-resolution');\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.body).to.have.property(\"didDocument\");\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.body).to.have.property(\"didResolutionMetadata\");\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.body).to.have.property(\"didDocumentMetadata\");\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://resolver.svip.danubetech.com/1.0/identifiers/did:ebsi:z25ZZFS7FweHsm9MX2Qvc6gc\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://resolver.svip.danubetech.com/1.0/identifiers/did:ebsi:z25ZZFS7FweHsm9MX2Qvc6gc\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request\n    at http://localhost:44573/__cypress/runner/cypress_runner.js:160652:78\n    at tryCatcher (http://localhost:44573/__cypress/runner/cypress_runner.js:13022:23)\n    at http://localhost:44573/__cypress/runner/cypress_runner.js:8144:41\n    at tryCatcher (http://localhost:44573/__cypress/runner/cypress_runner.js:13022:23)\n    at Promise._settlePromiseFromHandler (http://localhost:44573/__cypress/runner/cypress_runner.js:10957:31)\n    at Promise._settlePromise (http://localhost:44573/__cypress/runner/cypress_runner.js:11014:18)\n    at Promise._settlePromise0 (http://localhost:44573/__cypress/runner/cypress_runner.js:11059:10)\n    at Promise._settlePromises (http://localhost:44573/__cypress/runner/cypress_runner.js:11135:18)\n    at _drainQueueStep (http://localhost:44573/__cypress/runner/cypress_runner.js:7729:12)\n    at _drainQueue (http://localhost:44573/__cypress/runner/cypress_runner.js:7722:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:44573/__cypress/runner/cypress_runner.js:7738:5)\n    at Async.drainQueues (http://localhost:44573/__cypress/runner/cypress_runner.js:7608:14)\nFrom Your Spec Code:\n    at Context.eval (http://localhost:44573/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:125:13)",
                "diff": null
              },
              "uuid": "7105f86f-de41-423c-978e-138680eff01a",
              "parentUUID": "1f82b4ca-42fb-4060-97b3-304637710275",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "7105f86f-de41-423c-978e-138680eff01a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 8753,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f44f806c-01d5-4241-9fba-69e6db6c7938",
          "title": "Test Scenario 2: JSON-LD DID document",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A correct DID can be resolved with header input",
              "fullTitle": "Test Scenario 2: JSON-LD DID document A correct DID can be resolved with header input",
              "timedOut": null,
              "duration": 7122,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"normalDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const normalDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + normalDid,\n      headers: {\n        Accept: \"application/did+ld+json\"\n      },\n      failOnStatusCode: false\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      expect(response.status).to.eq(200);\n      expect(response.headers[\"content-type\"]).to.contain(\"application/did+ld+json\");\n      expect(response.body).not.to.have.property(\"didDocument\");\n      expect(response.body).has.property(\"id\").contains(normalDid);\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://resolver.svip.danubetech.com/1.0/identifiers/did:ebsi:z25ZZFS7FweHsm9MX2Qvc6gc\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://resolver.svip.danubetech.com/1.0/identifiers/did:ebsi:z25ZZFS7FweHsm9MX2Qvc6gc\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request\n    at http://localhost:44573/__cypress/runner/cypress_runner.js:160652:78\n    at tryCatcher (http://localhost:44573/__cypress/runner/cypress_runner.js:13022:23)\n    at http://localhost:44573/__cypress/runner/cypress_runner.js:8144:41\n    at tryCatcher (http://localhost:44573/__cypress/runner/cypress_runner.js:13022:23)\n    at Promise._settlePromiseFromHandler (http://localhost:44573/__cypress/runner/cypress_runner.js:10957:31)\n    at Promise._settlePromise (http://localhost:44573/__cypress/runner/cypress_runner.js:11014:18)\n    at Promise._settlePromise0 (http://localhost:44573/__cypress/runner/cypress_runner.js:11059:10)\n    at Promise._settlePromises (http://localhost:44573/__cypress/runner/cypress_runner.js:11135:18)\n    at _drainQueueStep (http://localhost:44573/__cypress/runner/cypress_runner.js:7729:12)\n    at _drainQueue (http://localhost:44573/__cypress/runner/cypress_runner.js:7722:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:44573/__cypress/runner/cypress_runner.js:7738:5)\n    at Async.drainQueues (http://localhost:44573/__cypress/runner/cypress_runner.js:7608:14)\nFrom Your Spec Code:\n    at Context.eval (http://localhost:44573/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:151:13)",
                "diff": null
              },
              "uuid": "51667840-a6c9-4a72-9103-79de79660b2c",
              "parentUUID": "f44f806c-01d5-4241-9fba-69e6db6c7938",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "51667840-a6c9-4a72-9103-79de79660b2c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 7122,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "01a459ad-3a6b-4933-ace9-ab3875c45e79",
          "title": "Test Scenario 3: Representation not supported",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Shows an error when a representation is prompted",
              "fullTitle": "Test Scenario 3: Representation not supported Shows an error when a representation is prompted",
              "timedOut": null,
              "duration": 7411,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"normalDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const normalDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + normalDid,\n      headers: {\n        Accept: \"image/png\"\n      },\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(406);\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://resolver.svip.danubetech.com/1.0/identifiers/did:ebsi:z25ZZFS7FweHsm9MX2Qvc6gc\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://resolver.svip.danubetech.com/1.0/identifiers/did:ebsi:z25ZZFS7FweHsm9MX2Qvc6gc\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request\n    at http://localhost:44573/__cypress/runner/cypress_runner.js:160652:78\n    at tryCatcher (http://localhost:44573/__cypress/runner/cypress_runner.js:13022:23)\n    at http://localhost:44573/__cypress/runner/cypress_runner.js:8144:41\n    at tryCatcher (http://localhost:44573/__cypress/runner/cypress_runner.js:13022:23)\n    at Promise._settlePromiseFromHandler (http://localhost:44573/__cypress/runner/cypress_runner.js:10957:31)\n    at Promise._settlePromise (http://localhost:44573/__cypress/runner/cypress_runner.js:11014:18)\n    at Promise._settlePromise0 (http://localhost:44573/__cypress/runner/cypress_runner.js:11059:10)\n    at Promise._settlePromises (http://localhost:44573/__cypress/runner/cypress_runner.js:11135:18)\n    at _drainQueueStep (http://localhost:44573/__cypress/runner/cypress_runner.js:7729:12)\n    at _drainQueue (http://localhost:44573/__cypress/runner/cypress_runner.js:7722:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:44573/__cypress/runner/cypress_runner.js:7738:5)\n    at Async.drainQueues (http://localhost:44573/__cypress/runner/cypress_runner.js:7608:14)\nFrom Your Spec Code:\n    at Context.eval (http://localhost:44573/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:200:13)",
                "diff": null
              },
              "uuid": "7e191184-450c-4f46-869c-a6ae23e03c40",
              "parentUUID": "01a459ad-3a6b-4933-ace9-ab3875c45e79",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "7e191184-450c-4f46-869c-a6ae23e03c40"
          ],
          "pending": [],
          "skipped": [],
          "duration": 7411,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0a6d1811-c592-42d0-8052-fd3e72eb5616",
          "title": "Test Scenario 4: Deactivated",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Returns an HTTP code of 410 for deactivated DIDs",
              "fullTitle": "Test Scenario 4: Deactivated Returns an HTTP code of 410 for deactivated DIDs",
              "timedOut": null,
              "duration": 407,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"deacDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const deacDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + deacDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(410);\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"'); //FAILS\n      expect(response.body.didDocumentMetadata.deactivated).to.eq(true);\n    });\n  });\n});",
              "err": {
                "message": "AssertionError: expected 404 to equal 410",
                "estack": "AssertionError: expected 404 to equal 410\n    at Context.eval (http://localhost:44573/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:220:40)",
                "diff": "- 404\n+ 410\n"
              },
              "uuid": "f56ffa0a-594e-4194-931d-b5f4818735f5",
              "parentUUID": "0a6d1811-c592-42d0-8052-fd3e72eb5616",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f56ffa0a-594e-4194-931d-b5f4818735f5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 407,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dbbf08f1-b6c2-46d9-8355-80e171adf792",
          "title": "Test Scenario 5: Not found",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Returns an HTTP code of 404 for non-existent DIDs",
              "fullTitle": "Test Scenario 5: Not found Returns an HTTP code of 404 for non-existent DIDs",
              "timedOut": null,
              "duration": 179,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"nonExisDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const nonExDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + nonExDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(404);\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n      expect(response.body.didResolutionMetadata.error).to.eq(\"notFound\");\n    });\n  });\n});",
              "err": {},
              "uuid": "2488af8e-1409-4c17-bcdd-3118c1ef3ddd",
              "parentUUID": "dbbf08f1-b6c2-46d9-8355-80e171adf792",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2488af8e-1409-4c17-bcdd-3118c1ef3ddd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 179,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3b63561d-5308-44af-8cc0-767b7615c0bf",
          "title": "Test Scenario 6: Invalid DID",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Returns a HTTP code of 400 for an invalid DID",
              "fullTitle": "Test Scenario 6: Invalid DID Returns a HTTP code of 400 for an invalid DID",
              "timedOut": null,
              "duration": 314,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"invalidDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const invalidDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + invalidDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(400);\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n      expect(response.body.didResolutionMetadata.error).contains(\"invalidDid\");\n    });\n  });\n});",
              "err": {},
              "uuid": "9883d17d-6cca-4074-99d8-f12674d1e201",
              "parentUUID": "3b63561d-5308-44af-8cc0-767b7615c0bf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9883d17d-6cca-4074-99d8-f12674d1e201"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 314,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "485fe14b-5bed-4f09-9c95-102a9af6ca86",
          "title": "Test Scenario 7: DID URLs with fragments",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Can resolve a DID with a fragment",
              "fullTitle": "Test Scenario 7: DID URLs with fragments Can resolve a DID with a fragment",
              "timedOut": null,
              "duration": 567,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"fragmentDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const fragmentDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + fragmentDid,\n      failOnStatusCode: false,\n      headers: {\n        Accept: \"application/did+ld+json\",\n        Authorization: \"Bearer b082c420-df67-4b06-899c-b7c51d75fba0\"\n      }\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      expect(response.status).to.eq(200);\n      expect(response.headers[\"content-type\"]).to.contain(\"application/did+ld+json\");\n      expect(response.body).not.to.have.property(\"didDocument\");\n      expect(response.body).to.have.property(\"id\");\n      expect(response.body[\"id\"]).to.contain(decodeURIComponent(fragmentDid.split(\"#\")[0]));\n    });\n  });\n});",
              "err": {},
              "uuid": "f8f2936a-361b-4522-8f84-d06026f6f22a",
              "parentUUID": "485fe14b-5bed-4f09-9c95-102a9af6ca86",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f8f2936a-361b-4522-8f84-d06026f6f22a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 567,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ca749f24-fe39-42c4-af56-f58c8dea5d23",
          "title": "Test Scenario 8: Service and relativeRef parameters",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Fetches DID",
              "fullTitle": "Test Scenario 8: Service and relativeRef parameters Fetches DID",
              "timedOut": null,
              "duration": 166,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"relativeParamDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const fragmentDid = list[key];\n    console.log(\"FRAGMENT DID IS\", fragmentDid);\n    cy.request({\n      method: \"GET\",\n      url: endpoint + fragmentDid,\n      headers: {\n        Accept: \"text/uri-list\"\n      },\n      failOnStatusCode: false\n    }).as(\"response\");\n    it(\"MUST return HTTP response status equals 303\", () => {\n      cy.get(\"@response\").then(response => {\n        expect(response.status).to.eq(303);\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "194ffd12-7ed8-473e-829c-214a5a8c5699",
              "parentUUID": "ca749f24-fe39-42c4-af56-f58c8dea5d23",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "194ffd12-7ed8-473e-829c-214a5a8c5699"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 166,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8daaed11-434c-412c-9640-cab37c976087",
          "title": "Test Scenario 9: DID URLs with transformKeys",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP response status 200",
              "fullTitle": "Test Scenario 9: DID URLs with transformKeys MUST return HTTP response status 200",
              "timedOut": null,
              "duration": 6770,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"transformKeyDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const transformKeyDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + transformKeyDid,\n      headers: {\n        Accept: \"application/did+ld+json\",\n        Authorization: \"Bearer b082c420-df67-4b06-899c-b7c51d75fba0\"\n      },\n      failOnStatusCode: false\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      expect(response.status).to.eq(200);\n      expect(response).to.be.a(\"object\");\n      response.body.verificationMethod.forEach(out => {\n        expect(out).has.property(\"type\").to.be.oneOf([\"JsonWebKey2020\", \"Ed25519VerificationKey2018\", \"X25519KeyAgreementKey2019\"]);\n      });\n      expect(response.headers[\"content-type\"]).contains(\"application/did+ld+json\");\n      expect(response.body).has.property(\"id\", decodeURIComponent(transformKeyDid.split(\"?\")[0].split(\"#\")[0]));\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://resolver.svip.danubetech.com/1.0/identifiers/did:ebsi:z25ZZFS7FweHsm9MX2Qvc6gc#keys-1\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://resolver.svip.danubetech.com/1.0/identifiers/did:ebsi:z25ZZFS7FweHsm9MX2Qvc6gc#keys-1\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request\n    at http://localhost:44573/__cypress/runner/cypress_runner.js:160652:78\n    at tryCatcher (http://localhost:44573/__cypress/runner/cypress_runner.js:13022:23)\n    at http://localhost:44573/__cypress/runner/cypress_runner.js:8144:41\n    at tryCatcher (http://localhost:44573/__cypress/runner/cypress_runner.js:13022:23)\n    at Promise._settlePromiseFromHandler (http://localhost:44573/__cypress/runner/cypress_runner.js:10957:31)\n    at Promise._settlePromise (http://localhost:44573/__cypress/runner/cypress_runner.js:11014:18)\n    at Promise._settlePromise0 (http://localhost:44573/__cypress/runner/cypress_runner.js:11059:10)\n    at Promise._settlePromises (http://localhost:44573/__cypress/runner/cypress_runner.js:11135:18)\n    at _drainQueueStep (http://localhost:44573/__cypress/runner/cypress_runner.js:7729:12)\n    at _drainQueue (http://localhost:44573/__cypress/runner/cypress_runner.js:7722:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:44573/__cypress/runner/cypress_runner.js:7738:5)\n    at Async.drainQueues (http://localhost:44573/__cypress/runner/cypress_runner.js:7608:14)\nFrom Your Spec Code:\n    at Context.eval (http://localhost:44573/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:349:13)",
                "diff": null
              },
              "uuid": "8a752ba0-bdf0-4e97-82ff-a45b53222bfe",
              "parentUUID": "8daaed11-434c-412c-9640-cab37c976087",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "8a752ba0-bdf0-4e97-82ff-a45b53222bfe"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6770,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "179ae321-9191-4c94-9036-6a049188d312",
          "title": "Test Scenario 12: Resolve a DID / dereference a DID URL",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP response status 200",
              "fullTitle": "Test Scenario 12: Resolve a DID / dereference a DID URL MUST return HTTP response status 200",
              "timedOut": null,
              "duration": 8672,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"normalDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const normalDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + normalDid,\n      headers: {\n        Accept: \"application/json\"\n      },\n      failOnStatusCode: false\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      console.log(\"normal did is:\", normalDid);\n      expect(response.status).to.eq(200);\n      expect(response.headers[\"content-type\"]).contains(\"application/did+json;charset=utf-8\");\n      expect(response.body).has.property(\"id\", normalDid); // expect(response.body[\"keyAgreement\"][0]).to.contain(normalDid);\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://resolver.svip.danubetech.com/1.0/identifiers/did:ebsi:z25ZZFS7FweHsm9MX2Qvc6gc\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://resolver.svip.danubetech.com/1.0/identifiers/did:ebsi:z25ZZFS7FweHsm9MX2Qvc6gc\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request\n    at http://localhost:44573/__cypress/runner/cypress_runner.js:160652:78\n    at tryCatcher (http://localhost:44573/__cypress/runner/cypress_runner.js:13022:23)\n    at http://localhost:44573/__cypress/runner/cypress_runner.js:8144:41\n    at tryCatcher (http://localhost:44573/__cypress/runner/cypress_runner.js:13022:23)\n    at Promise._settlePromiseFromHandler (http://localhost:44573/__cypress/runner/cypress_runner.js:10957:31)\n    at Promise._settlePromise (http://localhost:44573/__cypress/runner/cypress_runner.js:11014:18)\n    at Promise._settlePromise0 (http://localhost:44573/__cypress/runner/cypress_runner.js:11059:10)\n    at Promise._settlePromises (http://localhost:44573/__cypress/runner/cypress_runner.js:11135:18)\n    at _drainQueueStep (http://localhost:44573/__cypress/runner/cypress_runner.js:7729:12)\n    at _drainQueue (http://localhost:44573/__cypress/runner/cypress_runner.js:7722:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:44573/__cypress/runner/cypress_runner.js:7738:5)\n    at Async.drainQueues (http://localhost:44573/__cypress/runner/cypress_runner.js:7608:14)\nFrom Your Spec Code:\n    at Context.eval (http://localhost:44573/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:375:13)",
                "diff": null
              },
              "uuid": "e18a9c96-1bab-4f61-8114-95cbad8aee44",
              "parentUUID": "179ae321-9191-4c94-9036-6a049188d312",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e18a9c96-1bab-4f61-8114-95cbad8aee44"
          ],
          "pending": [],
          "skipped": [],
          "duration": 8672,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "98c9ee8c-efb9-4d55-b792-e667e9480d4f",
          "title": "Test Scenario 12B: Resolve a DID / dereference a DID URL",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP response status 200",
              "fullTitle": "Test Scenario 12B: Resolve a DID / dereference a DID URL MUST return HTTP response status 200",
              "timedOut": null,
              "duration": 6623,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"normalDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const normalDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + normalDid,\n      headers: {\n        Accept: 'application/ld+json;profile=\"https://w3id.org/did-resolution\"'\n      },\n      failOnStatusCode: false\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      console.log(\"normal did is:\", normalDid);\n      expect(response.status).to.eq(200);\n      expect(response.headers[\"content-type\"].replace(/\\s+/g, \"\")).contains('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://resolver.svip.danubetech.com/1.0/identifiers/did:ebsi:z25ZZFS7FweHsm9MX2Qvc6gc\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` timed out waiting `5000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: GET\nURL: https://resolver.svip.danubetech.com/1.0/identifiers/did:ebsi:z25ZZFS7FweHsm9MX2Qvc6gc\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request\n    at http://localhost:44573/__cypress/runner/cypress_runner.js:160652:78\n    at tryCatcher (http://localhost:44573/__cypress/runner/cypress_runner.js:13022:23)\n    at http://localhost:44573/__cypress/runner/cypress_runner.js:8144:41\n    at tryCatcher (http://localhost:44573/__cypress/runner/cypress_runner.js:13022:23)\n    at Promise._settlePromiseFromHandler (http://localhost:44573/__cypress/runner/cypress_runner.js:10957:31)\n    at Promise._settlePromise (http://localhost:44573/__cypress/runner/cypress_runner.js:11014:18)\n    at Promise._settlePromise0 (http://localhost:44573/__cypress/runner/cypress_runner.js:11059:10)\n    at Promise._settlePromises (http://localhost:44573/__cypress/runner/cypress_runner.js:11135:18)\n    at _drainQueueStep (http://localhost:44573/__cypress/runner/cypress_runner.js:7729:12)\n    at _drainQueue (http://localhost:44573/__cypress/runner/cypress_runner.js:7722:9)\n    at Async.../../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:44573/__cypress/runner/cypress_runner.js:7738:5)\n    at Async.drainQueues (http://localhost:44573/__cypress/runner/cypress_runner.js:7608:14)\nFrom Your Spec Code:\n    at Context.eval (http://localhost:44573/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:400:13)",
                "diff": null
              },
              "uuid": "1d46a5f1-2963-479e-b771-5189a625e038",
              "parentUUID": "98c9ee8c-efb9-4d55-b792-e667e9480d4f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "1d46a5f1-2963-479e-b771-5189a625e038"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6623,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.2"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mocha",
        "configFile": "reporterOpts.json",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.1.1"
    }
  }
}