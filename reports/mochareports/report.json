{
  "stats": {
    "suites": 4,
    "tests": 70,
    "passes": 54,
    "pending": 0,
    "failures": 16,
    "start": "2022-03-23T11:01:41.855Z",
    "end": "2022-03-23T11:02:27.703Z",
    "duration": 41834,
    "testsRegistered": 70,
    "passPercent": 77.14285714285714,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1c03ace6-837b-4039-ad2f-353030194785",
      "title": "",
      "fullFile": "cypress/integration/new_tests_spec.js",
      "file": "cypress/integration/new_tests_spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ff884b2f-1e09-4d31-8fe3-c70537f3d594",
          "title": "Test Scenario 2b: CBOR DID document: https://api.godiddy.com/0.1.0/universal-resolver/identifiers/",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP response status 200",
              "fullTitle": "Test Scenario 2b: CBOR DID document: https://api.godiddy.com/0.1.0/universal-resolver/identifiers/ MUST return HTTP response status 200",
              "timedOut": null,
              "duration": 2127,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:WRfXPg8dantKVubE3HX8pw\",\n  headers: {\n    Accept: \"application/did+cbor\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(200);\n});",
              "err": {},
              "uuid": "99de0eb2-0749-4da4-90b5-57dcd4cc0e1f",
              "parentUUID": "ff884b2f-1e09-4d31-8fe3-c70537f3d594",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "99de0eb2-0749-4da4-90b5-57dcd4cc0e1f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2127,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9b9831ae-3d9c-436e-a0cf-dc94d211e34f",
          "title": "Test Scenario 8: Service and relativeRef parameters",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP response status 303",
              "fullTitle": "Test Scenario 8: Service and relativeRef parameters MUST return HTTP response status 303",
              "timedOut": null,
              "duration": 125,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:web:danubetech.com?service=github&relativeRef=did-method-dns\",\n  headers: {\n    Accept: \"text/uri-list\"\n  },\n  failOnStatusCode: false\n}).as(\"response\");\nit(\"MUST return HTTP response status equals 300\", () => {\n  cy.get(\"@response\").then(response => {\n    expect(response.status).to.eq(303);\n  });\n});",
              "err": {},
              "uuid": "c9a4f10d-485c-4766-b771-b16afec6f6ce",
              "parentUUID": "9b9831ae-3d9c-436e-a0cf-dc94d211e34f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c9a4f10d-485c-4766-b771-b16afec6f6ce"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 125,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a286d375-025e-4a17-966c-df47a2b1aac7",
          "title": "Test Scenario 9: DID URLs with transformKeys",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP response status 200",
              "fullTitle": "Test Scenario 9: DID URLs with transformKeys MUST return HTTP response status 200",
              "timedOut": null,
              "duration": 548,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:WRfXPg8dantKVubE3HX8pw?transformKeys=JsonWebKey2020\",\n  headers: {\n    Accept: \"application/did+ld+json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(200);\n});",
              "err": {},
              "uuid": "ae2fa3df-3fd3-467c-8a59-2be6d966234f",
              "parentUUID": "a286d375-025e-4a17-966c-df47a2b1aac7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST return a JSON object",
              "fullTitle": "Test Scenario 9: DID URLs with transformKeys MUST return a JSON object",
              "timedOut": null,
              "duration": 2965,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:WRfXPg8dantKVubE3HX8pw?transformKeys=JsonWebKey2020\",\n  headers: {\n    Accept: \"application/did+ld+json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response).to.be.a(\"object\");\n});",
              "err": {},
              "uuid": "4376eec1-3ab2-43cf-ba36-b26e6cec646e",
              "parentUUID": "a286d375-025e-4a17-966c-df47a2b1aac7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST return property verificationMethod of type JsonWebKey2020",
              "fullTitle": "Test Scenario 9: DID URLs with transformKeys MUST return property verificationMethod of type JsonWebKey2020",
              "timedOut": null,
              "duration": 841,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:WRfXPg8dantKVubE3HX8pw?transformKeys=JsonWebKey2020\",\n  headers: {\n    Accept: \"application/did+ld+json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.body.verificationMethod[0]).has.property(\"type\", \"JsonWebKey2020\");\n});",
              "err": {},
              "uuid": "b051314c-e769-40e0-aab2-d08024d4ac2c",
              "parentUUID": "a286d375-025e-4a17-966c-df47a2b1aac7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST return HTTP header with Content-Type",
              "fullTitle": "Test Scenario 9: DID URLs with transformKeys MUST return HTTP header with Content-Type",
              "timedOut": null,
              "duration": 1820,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:WRfXPg8dantKVubE3HX8pw?transformKeys=JsonWebKey2020\",\n  headers: {\n    Accept: \"application/did+ld+json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.headers).has.property(\"content-type\", \"application/did+ld+json;charset=utf-8\");\n});",
              "err": {},
              "uuid": "edfd430c-db70-451f-9d25-a64e9c802ccf",
              "parentUUID": "a286d375-025e-4a17-966c-df47a2b1aac7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST return property id with value did:sov:WRfXPg8dantKVubE3HX8pw",
              "fullTitle": "Test Scenario 9: DID URLs with transformKeys MUST return property id with value did:sov:WRfXPg8dantKVubE3HX8pw",
              "timedOut": null,
              "duration": 559,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:WRfXPg8dantKVubE3HX8pw?transformKeys=JsonWebKey2020\",\n  headers: {\n    Accept: \"application/did+ld+json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.body).has.property(\"id\", \"did:sov:WRfXPg8dantKVubE3HX8pw\");\n});",
              "err": {},
              "uuid": "8265e17a-b2b1-4a2c-924a-093316846080",
              "parentUUID": "a286d375-025e-4a17-966c-df47a2b1aac7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST return property assertionMethod with value did:sov:WRfXPg8dantKVubE3HX8pw#key-1",
              "fullTitle": "Test Scenario 9: DID URLs with transformKeys MUST return property assertionMethod with value did:sov:WRfXPg8dantKVubE3HX8pw#key-1",
              "timedOut": null,
              "duration": 2698,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:WRfXPg8dantKVubE3HX8pw?transformKeys=JsonWebKey2020\",\n  headers: {\n    Accept: \"application/did+ld+json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.body.assertionMethod[0]).to.eq(\"did:sov:WRfXPg8dantKVubE3HX8pw#key-1\");\n});",
              "err": {},
              "uuid": "ecb87de6-3d28-4eaf-9102-060251b2cbd5",
              "parentUUID": "a286d375-025e-4a17-966c-df47a2b1aac7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST return property authentication with value did:sov:WRfXPg8dantKVubE3HX8pw#key-1",
              "fullTitle": "Test Scenario 9: DID URLs with transformKeys MUST return property authentication with value did:sov:WRfXPg8dantKVubE3HX8pw#key-1",
              "timedOut": null,
              "duration": 1034,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:WRfXPg8dantKVubE3HX8pw?transformKeys=JsonWebKey2020\",\n  headers: {\n    Accept: \"application/did+ld+json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.body.authentication[0]).to.eq(\"did:sov:WRfXPg8dantKVubE3HX8pw#key-1\");\n});",
              "err": {},
              "uuid": "ae210b20-bf79-45f7-97bb-61028c54f99f",
              "parentUUID": "a286d375-025e-4a17-966c-df47a2b1aac7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ae2fa3df-3fd3-467c-8a59-2be6d966234f",
            "4376eec1-3ab2-43cf-ba36-b26e6cec646e",
            "b051314c-e769-40e0-aab2-d08024d4ac2c",
            "edfd430c-db70-451f-9d25-a64e9c802ccf",
            "8265e17a-b2b1-4a2c-924a-093316846080",
            "ecb87de6-3d28-4eaf-9102-060251b2cbd5",
            "ae210b20-bf79-45f7-97bb-61028c54f99f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10465,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "68dab191-4279-439b-9b92-53950704a7ac",
          "title": "Test Scenario 10: DID URLs with versionTime parameter",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP response status 200",
              "fullTitle": "Test Scenario 10: DID URLs with versionTime parameter MUST return HTTP response status 200",
              "timedOut": null,
              "duration": 168,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:DjxRxnL4gXsncbH8jM8ySM?versionTime=2018-12-10T02:22:49Z\",\n  headers: {\n    Accept: \"application/did+ld+json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(200);\n});",
              "err": {},
              "uuid": "3bbfe7c3-41e0-4759-94c9-f4d47644f96c",
              "parentUUID": "68dab191-4279-439b-9b92-53950704a7ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST return HTTP header with Content-Type",
              "fullTitle": "Test Scenario 10: DID URLs with versionTime parameter MUST return HTTP header with Content-Type",
              "timedOut": null,
              "duration": 221,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:DjxRxnL4gXsncbH8jM8ySM?versionTime=2018-12-10T02:22:49Z\",\n  headers: {\n    Accept: \"application/did+ld+json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.headers[\"content-type\"]).to.contain(\"application/did+ld+json;charset=utf-8\");\n});",
              "err": {},
              "uuid": "dbbabf90-64c8-4995-acdf-afa72fab8767",
              "parentUUID": "68dab191-4279-439b-9b92-53950704a7ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST return JSON object",
              "fullTitle": "Test Scenario 10: DID URLs with versionTime parameter MUST return JSON object",
              "timedOut": null,
              "duration": 135,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:DjxRxnL4gXsncbH8jM8ySM?versionTime=2018-12-10T02:22:49Z\",\n  headers: {\n    Accept: \"application/did+ld+json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response).to.be.a(\"object\");\n});",
              "err": {},
              "uuid": "7a92a017-bff6-443d-ac87-0f38c5979d47",
              "parentUUID": "68dab191-4279-439b-9b92-53950704a7ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST contain property @context",
              "fullTitle": "Test Scenario 10: DID URLs with versionTime parameter MUST contain property @context",
              "timedOut": null,
              "duration": 307,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:DjxRxnL4gXsncbH8jM8ySM?versionTime=2018-12-10T02:22:49Z\",\n  headers: {\n    Accept: \"application/did+ld+json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.body).to.have.property(\"@context\");\n});",
              "err": {},
              "uuid": "4692f37a-de71-4984-8897-3546d6cd76bc",
              "parentUUID": "68dab191-4279-439b-9b92-53950704a7ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST contain property id with value ",
              "fullTitle": "Test Scenario 10: DID URLs with versionTime parameter MUST contain property id with value ",
              "timedOut": null,
              "duration": 134,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:DjxRxnL4gXsncbH8jM8ySM?versionTime=2018-12-10T02:22:49Z\",\n  headers: {\n    Accept: \"application/did+ld+json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.body).has.property(\"id\", \"did:sov:DjxRxnL4gXsncbH8jM8ySM\");\n});",
              "err": {},
              "uuid": "87150298-c6b5-45d3-8b36-56f8de384520",
              "parentUUID": "68dab191-4279-439b-9b92-53950704a7ac",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3bbfe7c3-41e0-4759-94c9-f4d47644f96c",
            "dbbabf90-64c8-4995-acdf-afa72fab8767",
            "7a92a017-bff6-443d-ac87-0f38c5979d47",
            "4692f37a-de71-4984-8897-3546d6cd76bc",
            "87150298-c6b5-45d3-8b36-56f8de384520"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 965,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c93dea82-eede-4c56-ad61-8ca121bba921",
          "title": "Test Scenario 11: DID URLs with versionId parameter",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP response status 200",
              "fullTitle": "Test Scenario 11: DID URLs with versionId parameter MUST return HTTP response status 200",
              "timedOut": null,
              "duration": 126,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:DjxRxnL4gXsncbH8jM8ySM?versionId=105\",\n  headers: {\n    Accept: \"application/did+ld+json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(200);\n});",
              "err": {},
              "uuid": "8f4bb518-bdc3-431a-b97c-98dd0051005e",
              "parentUUID": "c93dea82-eede-4c56-ad61-8ca121bba921",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST return JSON object",
              "fullTitle": "Test Scenario 11: DID URLs with versionId parameter MUST return JSON object",
              "timedOut": null,
              "duration": 320,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:DjxRxnL4gXsncbH8jM8ySM?versionId=105\",\n  headers: {\n    Accept: \"application/did+ld+json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response).to.be.a(\"object\");\n});",
              "err": {},
              "uuid": "f014b304-25fd-4be0-b3b9-b3e8dfc78851",
              "parentUUID": "c93dea82-eede-4c56-ad61-8ca121bba921",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "JSON object MUST contain property @context",
              "fullTitle": "Test Scenario 11: DID URLs with versionId parameter JSON object MUST contain property @context",
              "timedOut": null,
              "duration": 139,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:DjxRxnL4gXsncbH8jM8ySM?versionId=105\",\n  headers: {\n    Accept: \"application/did+ld+json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.body).to.have.property(\"@context\");\n});",
              "err": {},
              "uuid": "627eb524-8420-44e9-94eb-fed111ca2450",
              "parentUUID": "c93dea82-eede-4c56-ad61-8ca121bba921",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST return HTTP header with Content-Type",
              "fullTitle": "Test Scenario 11: DID URLs with versionId parameter MUST return HTTP header with Content-Type",
              "timedOut": null,
              "duration": 308,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:DjxRxnL4gXsncbH8jM8ySM?versionId=105\",\n  headers: {\n    Accept: \"application/did+ld+json;charset=utf-8\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.headers[\"content-type\"]).to.contain(\"application/did+ld+json;charset=utf-8\");\n});",
              "err": {},
              "uuid": "c638058c-7765-48f9-a120-993befe96289",
              "parentUUID": "c93dea82-eede-4c56-ad61-8ca121bba921",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST contain property id",
              "fullTitle": "Test Scenario 11: DID URLs with versionId parameter MUST contain property id",
              "timedOut": null,
              "duration": 146,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:DjxRxnL4gXsncbH8jM8ySM?versionId=105\",\n  headers: {\n    Accept: \"application/did+ld+json;charset=utf-8\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.body).has.property(\"id\", \"did:sov:DjxRxnL4gXsncbH8jM8ySM\");\n});",
              "err": {},
              "uuid": "2535479b-01ae-4528-afda-0d486c6ffb48",
              "parentUUID": "c93dea82-eede-4c56-ad61-8ca121bba921",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8f4bb518-bdc3-431a-b97c-98dd0051005e",
            "f014b304-25fd-4be0-b3b9-b3e8dfc78851",
            "627eb524-8420-44e9-94eb-fed111ca2450",
            "c638058c-7765-48f9-a120-993befe96289",
            "2535479b-01ae-4528-afda-0d486c6ffb48"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1039,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "93174cff-681a-45be-942b-c1fbf997310a",
          "title": "Test Scenario 12: Resolve a DID / dereference a DID URL",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP response status 200",
              "fullTitle": "Test Scenario 12: Resolve a DID / dereference a DID URL MUST return HTTP response status 200",
              "timedOut": null,
              "duration": 982,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:builder:VbPQNHsvoLZdaNU7fTBeFx\",\n  headers: {\n    Accept: \"application/json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(200);\n});",
              "err": {},
              "uuid": "66e9888c-2018-4466-b884-44e0422571b6",
              "parentUUID": "93174cff-681a-45be-942b-c1fbf997310a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST return HTTP header with Content-Type",
              "fullTitle": "Test Scenario 12: Resolve a DID / dereference a DID URL MUST return HTTP header with Content-Type",
              "timedOut": null,
              "duration": 170,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:builder:VbPQNHsvoLZdaNU7fTBeFx\",\n  headers: {\n    Accept: \"application/json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.headers).has.property(\"content-type\", \"application/did+json;charset=utf-8\");\n});",
              "err": {},
              "uuid": "ad817ae4-275b-4157-abbd-dc7a6e095c0c",
              "parentUUID": "93174cff-681a-45be-942b-c1fbf997310a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST contain property id",
              "fullTitle": "Test Scenario 12: Resolve a DID / dereference a DID URL MUST contain property id",
              "timedOut": null,
              "duration": 485,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:builder:VbPQNHsvoLZdaNU7fTBeFx\",\n  headers: {\n    Accept: \"application/json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.body).has.property(\"id\", \"did:sov:builder:VbPQNHsvoLZdaNU7fTBeFx\");\n});",
              "err": {},
              "uuid": "0678a852-c0bd-4af8-8238-ac29ea7aeddb",
              "parentUUID": "93174cff-681a-45be-942b-c1fbf997310a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST contain property authentication",
              "fullTitle": "Test Scenario 12: Resolve a DID / dereference a DID URL MUST contain property authentication",
              "timedOut": null,
              "duration": 344,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:builder:VbPQNHsvoLZdaNU7fTBeFx\",\n  headers: {\n    Accept: \"application/json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.body[\"authentication\"][0]).to.contain(\"did:sov:builder:VbPQNHsvoLZdaNU7fTBeFx\");\n});",
              "err": {},
              "uuid": "d6c1d6de-880a-4aa6-8e01-acc1bcb0cf60",
              "parentUUID": "93174cff-681a-45be-942b-c1fbf997310a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST contain property assertionMethod",
              "fullTitle": "Test Scenario 12: Resolve a DID / dereference a DID URL MUST contain property assertionMethod",
              "timedOut": null,
              "duration": 152,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:builder:VbPQNHsvoLZdaNU7fTBeFx\",\n  headers: {\n    Accept: \"application/json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.body[\"assertionMethod\"][0]).to.contain(\"did:sov:builder:VbPQNHsvoLZdaNU7fTBeFx\");\n});",
              "err": {},
              "uuid": "7bef2f84-9c61-4fbd-973c-da0783ea187e",
              "parentUUID": "93174cff-681a-45be-942b-c1fbf997310a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST contain property keyAgreement",
              "fullTitle": "Test Scenario 12: Resolve a DID / dereference a DID URL MUST contain property keyAgreement",
              "timedOut": null,
              "duration": 1429,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:builder:VbPQNHsvoLZdaNU7fTBeFx\",\n  headers: {\n    Accept: \"application/json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.body[\"keyAgreement\"][0]).to.contain(\"did:sov:builder:VbPQNHsvoLZdaNU7fTBeFx\");\n});",
              "err": {},
              "uuid": "7b79b522-9dff-4d9f-8438-8ab762fb2efc",
              "parentUUID": "93174cff-681a-45be-942b-c1fbf997310a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "66e9888c-2018-4466-b884-44e0422571b6",
            "ad817ae4-275b-4157-abbd-dc7a6e095c0c",
            "0678a852-c0bd-4af8-8238-ac29ea7aeddb",
            "d6c1d6de-880a-4aa6-8e01-acc1bcb0cf60",
            "7bef2f84-9c61-4fbd-973c-da0783ea187e",
            "7b79b522-9dff-4d9f-8438-8ab762fb2efc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3562,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a3985a40-ce54-413a-a916-8b6e329005b3",
          "title": "Test Scenario 12B: Resolve a DID / dereference a DID URL",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP response status 200",
              "fullTitle": "Test Scenario 12B: Resolve a DID / dereference a DID URL MUST return HTTP response status 200",
              "timedOut": null,
              "duration": 128,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:builder:VbPQNHsvoLZdaNU7fTBeFx\",\n  headers: {\n    Accept: 'application/ld+json;profile=\"https://w3c-ccg.github.io/did-resolution/\"'\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(200);\n});",
              "err": {
                "message": "AssertionError: expected 406 to equal 200",
                "estack": "AssertionError: expected 406 to equal 200\n    at Context.eval (http://localhost:56829/__cypress/tests?p=cypress/integration/new_tests_spec.js:428:34)",
                "diff": "- 406\n+ 200\n"
              },
              "uuid": "086f0760-ffdd-4b05-a6ba-75fea84d773c",
              "parentUUID": "a3985a40-ce54-413a-a916-8b6e329005b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HTTP response must contain content-type property with value application/did+json;charset=utf-8",
              "fullTitle": "Test Scenario 12B: Resolve a DID / dereference a DID URL HTTP response must contain content-type property with value application/did+json;charset=utf-8",
              "timedOut": null,
              "duration": 430,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:builder:VbPQNHsvoLZdaNU7fTBeFx\",\n  headers: {\n    Accept: 'application/ld+json;profile=\"https://w3c-ccg.github.io/did-resolution/\"'\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.headers).has.property(\"content-type\", 'application/ld+json; profile=\"https://w3c-ccg.github.io/did-resolution/\"');\n});",
              "err": {},
              "uuid": "54bfdddd-5653-4ff8-bf37-1a94929cd5ac",
              "parentUUID": "a3985a40-ce54-413a-a916-8b6e329005b3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "54bfdddd-5653-4ff8-bf37-1a94929cd5ac"
          ],
          "failures": [
            "086f0760-ffdd-4b05-a6ba-75fea84d773c"
          ],
          "pending": [],
          "skipped": [],
          "duration": 558,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "040b7a21-e582-48a4-9d83-5525ecf5c7fe",
          "title": "Test Scenario 13: Retrieve configuration properties",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP response status 200",
              "fullTitle": "Test Scenario 13: Retrieve configuration properties MUST return HTTP response status 200",
              "timedOut": null,
              "duration": 886,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"https://api.dev.godiddy.com/0.1.0/universal-resolver/properties\"\n}).then(response => {\n  expect(response.status).to.eq(200);\n});",
              "err": {},
              "uuid": "4faaa3fc-01ca-4338-8a07-ade05c0915ad",
              "parentUUID": "040b7a21-e582-48a4-9d83-5525ecf5c7fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST return JSON object",
              "fullTitle": "Test Scenario 13: Retrieve configuration properties MUST return JSON object",
              "timedOut": null,
              "duration": 80,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"https://api.dev.godiddy.com/0.1.0/universal-resolver/properties\"\n}).then(response => {\n  expect(response).to.be.a(\"object\");\n});",
              "err": {},
              "uuid": "9501677f-ab6b-47a3-8ec8-17ba7cee16db",
              "parentUUID": "040b7a21-e582-48a4-9d83-5525ecf5c7fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "HTTP response must contain content-type property with value",
              "fullTitle": "Test Scenario 13: Retrieve configuration properties HTTP response must contain content-type property with value",
              "timedOut": null,
              "duration": 111,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"https://api.dev.godiddy.com/0.1.0/universal-resolver/properties\"\n}).then(response => {\n  expect(response.headers).has.property(\"content-type\", \"application/json;charset=utf-8\");\n});",
              "err": {},
              "uuid": "7238c87e-5aff-4dec-84e7-76b499dba1a1",
              "parentUUID": "040b7a21-e582-48a4-9d83-5525ecf5c7fe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4faaa3fc-01ca-4338-8a07-ade05c0915ad",
            "9501677f-ab6b-47a3-8ec8-17ba7cee16db",
            "7238c87e-5aff-4dec-84e7-76b499dba1a1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1077,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9e2e6c23-cc34-49fa-936a-3f66e23f89d6",
          "title": "Test Scenario 14: Retrieve supported DID methods",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test HTTP response",
              "fullTitle": "Test Scenario 14: Retrieve supported DID methods Test HTTP response",
              "timedOut": null,
              "duration": 52,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"https://api.dev.godiddy.com/0.1.0/universal-resolver/methods\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(200);\n});",
              "err": {},
              "uuid": "5c08e58e-90be-48c3-9a89-c211786762a9",
              "parentUUID": "9e2e6c23-cc34-49fa-936a-3f66e23f89d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST return a JSON object",
              "fullTitle": "Test Scenario 14: Retrieve supported DID methods MUST return a JSON object",
              "timedOut": null,
              "duration": 365,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"https://api.dev.godiddy.com/0.1.0/universal-resolver/methods\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response).to.be.a(\"object\");\n});",
              "err": {},
              "uuid": "105353e3-ccc3-4eaa-b80f-1df42062e4af",
              "parentUUID": "9e2e6c23-cc34-49fa-936a-3f66e23f89d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST contain body of type array",
              "fullTitle": "Test Scenario 14: Retrieve supported DID methods MUST contain body of type array",
              "timedOut": null,
              "duration": 134,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"https://api.dev.godiddy.com/0.1.0/universal-resolver/methods\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.body).to.be.a(\"array\");\n});",
              "err": {},
              "uuid": "565c75e0-4ad4-47d2-9d46-d5b965d8c1f5",
              "parentUUID": "9e2e6c23-cc34-49fa-936a-3f66e23f89d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test HTTP response",
              "fullTitle": "Test Scenario 14: Retrieve supported DID methods Test HTTP response",
              "timedOut": null,
              "duration": 345,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"https://api.dev.godiddy.com/0.1.0/universal-resolver/methods\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.body).to.deep.equal([\"btcr\", \"sov\", \"v1\", \"web\", \"ethr\", \"jolo\", \"elem\", \"github\", \"key\", \"ion\", \"gatc\", \"ebsi\", \"tz\", \"pkh\"]);\n});",
              "err": {},
              "uuid": "ce609977-407a-4e4e-a763-2c1b5220c3f1",
              "parentUUID": "9e2e6c23-cc34-49fa-936a-3f66e23f89d6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5c08e58e-90be-48c3-9a89-c211786762a9",
            "105353e3-ccc3-4eaa-b80f-1df42062e4af",
            "565c75e0-4ad4-47d2-9d46-d5b965d8c1f5",
            "ce609977-407a-4e4e-a763-2c1b5220c3f1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 896,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "094b0540-4bc9-4949-9826-45b0f3ddbdcd",
          "title": "Test Scenario 15: Retrieve object of test identifiers",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP response status 200",
              "fullTitle": "Test Scenario 15: Retrieve object of test identifiers MUST return HTTP response status 200",
              "timedOut": null,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"https://api.dev.godiddy.com/0.1.0/universal-resolver/testIdentifiers\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(200);\n});",
              "err": {},
              "uuid": "f1fe1987-18ae-45f1-b245-00cfe9daf1fc",
              "parentUUID": "094b0540-4bc9-4949-9826-45b0f3ddbdcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST return a JSON object",
              "fullTitle": "Test Scenario 15: Retrieve object of test identifiers MUST return a JSON object",
              "timedOut": null,
              "duration": 48,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"https://api.dev.godiddy.com/0.1.0/universal-resolver/testIdentifiers\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response).to.be.a(\"object\");\n});",
              "err": {},
              "uuid": "f2db646b-6454-4a97-9493-9192cbc7c41f",
              "parentUUID": "094b0540-4bc9-4949-9826-45b0f3ddbdcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST return a body of type object",
              "fullTitle": "Test Scenario 15: Retrieve object of test identifiers MUST return a body of type object",
              "timedOut": null,
              "duration": 417,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"https://api.dev.godiddy.com/0.1.0/universal-resolver/testIdentifiers\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.body).to.be.a(\"object\");\n});",
              "err": {},
              "uuid": "8d74efe7-0e28-42fa-83bf-ac5e006d0274",
              "parentUUID": "094b0540-4bc9-4949-9826-45b0f3ddbdcd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f1fe1987-18ae-45f1-b245-00cfe9daf1fc",
            "f2db646b-6454-4a97-9493-9192cbc7c41f",
            "8d74efe7-0e28-42fa-83bf-ac5e006d0274"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 497,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "7934e388-0d1c-4b6a-af73-d7001ad218cd",
      "title": "",
      "fullFile": "cypress/integration/resolver_spec.js",
      "file": "cypress/integration/resolver_spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a6484bb6-3f8c-4bfa-9410-e3d9c4166956",
          "title": "Test Scenario 1: DID Resolution Result overview: https://api.godiddy.com/0.1.0/universal-resolver/identifiers/",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP code 200",
              "fullTitle": "Test Scenario 1: DID Resolution Result overview: https://api.godiddy.com/0.1.0/universal-resolver/identifiers/ MUST return HTTP code 200",
              "timedOut": null,
              "duration": 1909,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@request\").then(response => {\n  expect(response.status).to.eq(200);\n});",
              "err": {},
              "uuid": "e7982639-fdfb-422a-b1ea-8e181a840b3d",
              "parentUUID": "a6484bb6-3f8c-4bfa-9410-e3d9c4166956",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should have header with Content-Type with value application/ld+json;profile=\"https://w3id.org/did-resolution\" ",
              "fullTitle": "Test Scenario 1: DID Resolution Result overview: https://api.godiddy.com/0.1.0/universal-resolver/identifiers/ Should have header with Content-Type with value application/ld+json;profile=\"https://w3id.org/did-resolution\" ",
              "timedOut": null,
              "duration": 732,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@request\").then(response => {\n  expect(response.headers[\"content-type\"]).to.contain('application/ld+json; profile=\"https://w3id.org/did-resolution');\n});",
              "err": {},
              "uuid": "86c0bd0c-ce91-4e17-a89e-a073749eeae0",
              "parentUUID": "a6484bb6-3f8c-4bfa-9410-e3d9c4166956",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Must contain property didDocument",
              "fullTitle": "Test Scenario 1: DID Resolution Result overview: https://api.godiddy.com/0.1.0/universal-resolver/identifiers/ Must contain property didDocument",
              "timedOut": null,
              "duration": 2095,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@request\").then(response => {\n  expect(response.body).to.have.property(\"didDocument\");\n});",
              "err": {},
              "uuid": "a91919ef-6064-4849-9f80-df0943f47401",
              "parentUUID": "a6484bb6-3f8c-4bfa-9410-e3d9c4166956",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Must contain property didResolutionMetadata",
              "fullTitle": "Test Scenario 1: DID Resolution Result overview: https://api.godiddy.com/0.1.0/universal-resolver/identifiers/ Must contain property didResolutionMetadata",
              "timedOut": null,
              "duration": 907,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@request\").then(response => {\n  expect(response.body).to.have.property(\"didResolutionMetadata\");\n});",
              "err": {},
              "uuid": "7ce917b9-1eb8-461e-8a99-0d4eb9c64dfa",
              "parentUUID": "a6484bb6-3f8c-4bfa-9410-e3d9c4166956",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Must contain property didDocumentMetadata",
              "fullTitle": "Test Scenario 1: DID Resolution Result overview: https://api.godiddy.com/0.1.0/universal-resolver/identifiers/ Must contain property didDocumentMetadata",
              "timedOut": null,
              "duration": 653,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@request\").then(response => {\n  expect(response.body).to.have.property(\"didDocumentMetadata\");\n});",
              "err": {},
              "uuid": "2f6b1b85-5b52-424c-a921-4a8551a2c18f",
              "parentUUID": "a6484bb6-3f8c-4bfa-9410-e3d9c4166956",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e7982639-fdfb-422a-b1ea-8e181a840b3d",
            "86c0bd0c-ce91-4e17-a89e-a073749eeae0",
            "a91919ef-6064-4849-9f80-df0943f47401",
            "7ce917b9-1eb8-461e-8a99-0d4eb9c64dfa",
            "2f6b1b85-5b52-424c-a921-4a8551a2c18f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6296,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "82fe8b8e-0e26-409a-8f6e-756031c31747",
          "title": "Test Scenario 2: JSON-LD DID document",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should have response status 200",
              "fullTitle": "Test Scenario 2: JSON-LD DID document Should have response status 200",
              "timedOut": null,
              "duration": 1823,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.status).to.eq(200);\n});",
              "err": {},
              "uuid": "a7689f71-4a2a-4f62-86a9-1d1c1bbfadff",
              "parentUUID": "82fe8b8e-0e26-409a-8f6e-756031c31747",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should have header with content type",
              "fullTitle": "Test Scenario 2: JSON-LD DID document Should have header with content type",
              "timedOut": null,
              "duration": 662,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.headers[\"content-type\"]).to.contain(\"application/did+ld+json\");\n});",
              "err": {},
              "uuid": "3fc6e360-b928-4089-b300-ca3ef16f4623",
              "parentUUID": "82fe8b8e-0e26-409a-8f6e-756031c31747",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not have property didDocument",
              "fullTitle": "Test Scenario 2: JSON-LD DID document Should not have property didDocument",
              "timedOut": null,
              "duration": 1575,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.body).not.to.have.property(\"didDocument\");\n});",
              "err": {},
              "uuid": "2b2cd1e5-c00a-496c-9c29-37e5432dd086",
              "parentUUID": "82fe8b8e-0e26-409a-8f6e-756031c31747",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should have property @context",
              "fullTitle": "Test Scenario 2: JSON-LD DID document Should have property @context",
              "timedOut": null,
              "duration": 543,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.body).to.have.property(\"@context\");\n});",
              "err": {},
              "uuid": "328188df-9c2c-4f2a-b066-30e612789c95",
              "parentUUID": "82fe8b8e-0e26-409a-8f6e-756031c31747",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a7689f71-4a2a-4f62-86a9-1d1c1bbfadff",
            "3fc6e360-b928-4089-b300-ca3ef16f4623",
            "2b2cd1e5-c00a-496c-9c29-37e5432dd086",
            "328188df-9c2c-4f2a-b066-30e612789c95"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4603,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5d5940c8-3acf-4d34-b009-8fc863697942",
          "title": "Test Scenario 3: Representation not supported",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP code 406",
              "fullTitle": "Test Scenario 3: Representation not supported MUST return HTTP code 406",
              "timedOut": null,
              "duration": 47,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:WRfXPg8dantKVubE3HX8pw\",\n  failOnStatusCode: false,\n  headers: {\n    Accept: \"image/png\"\n  }\n}).then(response => {\n  expect(response.status).to.eq(406);\n});",
              "err": {},
              "uuid": "705f265e-998b-42f9-a875-57bbe5df961e",
              "parentUUID": "5d5940c8-3acf-4d34-b009-8fc863697942",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "705f265e-998b-42f9-a875-57bbe5df961e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 47,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bd976104-6f5e-40d1-8397-3364e873b264",
          "title": "Test Scenario 4: Deactivated",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP code 410",
              "fullTitle": "Test Scenario 4: Deactivated MUST return HTTP code 410",
              "timedOut": null,
              "duration": 54,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:kilt:4r6RdVMNes2eEobxyxH7aVsesUqR2X175sUAXJfo7dEWxHUS\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(410);\n});",
              "err": {
                "message": "AssertionError: expected 404 to equal 410",
                "estack": "AssertionError: expected 404 to equal 410\n    at Context.eval (http://localhost:56829/__cypress/tests?p=cypress/integration/resolver_spec.js:197:36)",
                "diff": "- 404\n+ 410\n"
              },
              "uuid": "ba99a05a-4678-4de6-a5c6-cb42e3aaac63",
              "parentUUID": "bd976104-6f5e-40d1-8397-3364e873b264",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST return HTTP header Content-Type",
              "fullTitle": "Test Scenario 4: Deactivated MUST return HTTP header Content-Type",
              "timedOut": null,
              "duration": 78,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:kilt:4r6RdVMNes2eEobxyxH7aVsesUqR2X175sUAXJfo7dEWxHUS\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n});",
              "err": {
                "message": "AssertionError: expected 'text/plain;charset=UTF-8' to include 'application/ld+json;profile=\"https://w3id.org/did-resolution\"'",
                "estack": "AssertionError: expected 'text/plain;charset=UTF-8' to include 'application/ld+json;profile=\"https://w3id.org/did-resolution\"'\n    at Context.eval (http://localhost:56829/__cypress/tests?p=cypress/integration/resolver_spec.js:206:53)",
                "diff": null
              },
              "uuid": "cd4e1de1-fdfd-4ac5-ae1b-97bf3aeb127f",
              "parentUUID": "bd976104-6f5e-40d1-8397-3364e873b264",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "JSON object MUST contain property didDocumentMetadata.deactivated = true",
              "fullTitle": "Test Scenario 4: Deactivated JSON object MUST contain property didDocumentMetadata.deactivated = true",
              "timedOut": null,
              "duration": 148,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:kilt:4r6RdVMNes2eEobxyxH7aVsesUqR2X175sUAXJfo7dEWxHUS\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.body.didDocumentMetadata.deactivated).to.eq(true);\n});",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'deactivated')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'deactivated')\n    at Context.eval (http://localhost:56829/__cypress/tests?p=cypress/integration/resolver_spec.js:215:50)",
                "diff": null
              },
              "uuid": "ad05b632-0687-4e17-b1cf-8a17781c4516",
              "parentUUID": "bd976104-6f5e-40d1-8397-3364e873b264",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "ba99a05a-4678-4de6-a5c6-cb42e3aaac63",
            "cd4e1de1-fdfd-4ac5-ae1b-97bf3aeb127f",
            "ad05b632-0687-4e17-b1cf-8a17781c4516"
          ],
          "pending": [],
          "skipped": [],
          "duration": 280,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9b00ff09-3519-4919-a3ca-869068ccfc03",
          "title": "Test Scenario 5: Not found",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP code 404",
              "fullTitle": "Test Scenario 5: Not found MUST return HTTP code 404",
              "timedOut": null,
              "duration": 77,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:0000000000000000000000\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n});",
              "err": {},
              "uuid": "311f2416-69b2-48d8-90c1-8a06fbae4981",
              "parentUUID": "9b00ff09-3519-4919-a3ca-869068ccfc03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST return HTTP header Content-Type with value application/ld+json;profile=\"https://w3id.org/did-resolution\"",
              "fullTitle": "Test Scenario 5: Not found MUST return HTTP header Content-Type with value application/ld+json;profile=\"https://w3id.org/did-resolution\"",
              "timedOut": null,
              "duration": 95,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:sov:0000000000000000000000\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n});",
              "err": {
                "message": "AssertionError: expected 'text/plain;charset=UTF-8' to include 'application/ld+json;profile=\"https://w3id.org/did-resolution\"'",
                "estack": "AssertionError: expected 'text/plain;charset=UTF-8' to include 'application/ld+json;profile=\"https://w3id.org/did-resolution\"'\n    at Context.eval (http://localhost:56829/__cypress/tests?p=cypress/integration/resolver_spec.js:238:53)",
                "diff": null
              },
              "uuid": "efa5804a-e2bf-47b7-920b-ffe614e26cab",
              "parentUUID": "9b00ff09-3519-4919-a3ca-869068ccfc03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "JSON object MUST contain property didResolutionMetadata.error = \"notFound\"",
              "fullTitle": "Test Scenario 5: Not found JSON object MUST contain property didResolutionMetadata.error = \"notFound\"",
              "timedOut": null,
              "duration": 1463,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: \"https://dev.uniresolver.io/1.0/identifiers/did:sov:0000000000000000000000\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.body.didResolutionMetadata.error).to.eq(\"notFound\");\n});",
              "err": {},
              "uuid": "b38c7259-98ca-4b39-a7fe-b2027879a1bb",
              "parentUUID": "9b00ff09-3519-4919-a3ca-869068ccfc03",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "311f2416-69b2-48d8-90c1-8a06fbae4981",
            "b38c7259-98ca-4b39-a7fe-b2027879a1bb"
          ],
          "failures": [
            "efa5804a-e2bf-47b7-920b-ffe614e26cab"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1635,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1760a4a5-24dc-4a48-907c-cd4a24112bad",
          "title": "Test Scenario 6: Invalid DID",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "MUST return HTTP code 400",
              "fullTitle": "Test Scenario 6: Invalid DID MUST return HTTP code 400",
              "timedOut": null,
              "duration": 60,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:example_222\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400);\n});",
              "err": {
                "message": "AssertionError: expected 500 to equal 400",
                "estack": "AssertionError: expected 500 to equal 400\n    at Context.eval (http://localhost:56829/__cypress/tests?p=cypress/integration/resolver_spec.js:261:36)",
                "diff": "- 500\n+ 400\n"
              },
              "uuid": "15eeb772-b050-42a6-80b1-40b439eacec5",
              "parentUUID": "1760a4a5-24dc-4a48-907c-cd4a24112bad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST return HTTP header Content-Type with value application/ld+json;profile=\"https://w3id.org/did-resolution\"",
              "fullTitle": "Test Scenario 6: Invalid DID MUST return HTTP header Content-Type with value application/ld+json;profile=\"https://w3id.org/did-resolution\"",
              "timedOut": null,
              "duration": 88,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:example_222\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n});",
              "err": {
                "message": "AssertionError: expected 'text/plain;charset=UTF-8' to include 'application/ld+json;profile=\"https://w3id.org/did-resolution\"'",
                "estack": "AssertionError: expected 'text/plain;charset=UTF-8' to include 'application/ld+json;profile=\"https://w3id.org/did-resolution\"'\n    at Context.eval (http://localhost:56829/__cypress/tests?p=cypress/integration/resolver_spec.js:270:53)",
                "diff": null
              },
              "uuid": "aafe68a9-7a0c-4257-86a8-75e167929544",
              "parentUUID": "1760a4a5-24dc-4a48-907c-cd4a24112bad",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "JSON object MUST contain property didResolutionMetadata.error = \"invalidDid\"",
              "fullTitle": "Test Scenario 6: Invalid DID JSON object MUST contain property didResolutionMetadata.error = \"invalidDid\"",
              "timedOut": null,
              "duration": 91,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: endpoint + \"did:example_222\",\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.body.didResolutionMetadata.error).to.eq(\"invalidDid\");\n});",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'error')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'error')\n    at Context.eval (http://localhost:56829/__cypress/tests?p=cypress/integration/resolver_spec.js:279:52)",
                "diff": null
              },
              "uuid": "5007265b-5fda-47f9-90e6-dab12db58701",
              "parentUUID": "1760a4a5-24dc-4a48-907c-cd4a24112bad",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "15eeb772-b050-42a6-80b1-40b439eacec5",
            "aafe68a9-7a0c-4257-86a8-75e167929544",
            "5007265b-5fda-47f9-90e6-dab12db58701"
          ],
          "pending": [],
          "skipped": [],
          "duration": 239,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "96ffc2e3-4edd-4d7c-aae4-07125ca0fa98",
          "title": "Test Scenario 7: DID URLs with fragments",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Must return HTTP code 200",
              "fullTitle": "Test Scenario 7: DID URLs with fragments Must return HTTP code 200",
              "timedOut": null,
              "duration": 780,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.status).to.eq(200);\n});",
              "err": {},
              "uuid": "4e5ba9cd-77c7-42cb-86e5-dde50d196754",
              "parentUUID": "96ffc2e3-4edd-4d7c-aae4-07125ca0fa98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "MUST return HTTP header Content-Type with value application/did+ld+json",
              "fullTitle": "Test Scenario 7: DID URLs with fragments MUST return HTTP header Content-Type with value application/did+ld+json",
              "timedOut": null,
              "duration": 2049,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.headers[\"content-type\"]).to.contain(\"application/did+ld+json\");\n});",
              "err": {},
              "uuid": "106fd743-2f8e-4132-ba6d-5a8e5a482f33",
              "parentUUID": "96ffc2e3-4edd-4d7c-aae4-07125ca0fa98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "JSON object MUST NOT contain property didDocument",
              "fullTitle": "Test Scenario 7: DID URLs with fragments JSON object MUST NOT contain property didDocument",
              "timedOut": null,
              "duration": 763,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.body).not.to.have.property(\"didDocument\");\n});",
              "err": {},
              "uuid": "ed49e0a2-cade-47d4-873f-1c7c4934581c",
              "parentUUID": "96ffc2e3-4edd-4d7c-aae4-07125ca0fa98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "JSON object MUST contain property @context",
              "fullTitle": "Test Scenario 7: DID URLs with fragments JSON object MUST contain property @context",
              "timedOut": null,
              "duration": 1644,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.body).to.have.property(\"@context\");\n});",
              "err": {},
              "uuid": "fbcb1136-7657-4234-bdbf-7ce841c1e7cc",
              "parentUUID": "96ffc2e3-4edd-4d7c-aae4-07125ca0fa98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "JSON object MUST contain property type",
              "fullTitle": "Test Scenario 7: DID URLs with fragments JSON object MUST contain property type",
              "timedOut": null,
              "duration": 751,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.body).to.have.property(\"type\");\n});",
              "err": {},
              "uuid": "fdb535eb-f4f0-4726-b94a-2b31e6685df4",
              "parentUUID": "96ffc2e3-4edd-4d7c-aae4-07125ca0fa98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "JSON object MUST contain property id with value application/did+ld+json",
              "fullTitle": "Test Scenario 7: DID URLs with fragments JSON object MUST contain property id with value application/did+ld+json",
              "timedOut": null,
              "duration": 553,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get(\"@headers\").then(response => {\n  expect(response.body).to.have.property(\"id\");\n  expect(response.body[\"id\"]).to.contain(\"did:sov:WRfXPg8dantKVubE3HX8pw#key-1\");\n});",
              "err": {},
              "uuid": "c66c4632-e7a4-466b-b0f9-189d19ad5a6e",
              "parentUUID": "96ffc2e3-4edd-4d7c-aae4-07125ca0fa98",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4e5ba9cd-77c7-42cb-86e5-dde50d196754",
            "106fd743-2f8e-4132-ba6d-5a8e5a482f33",
            "ed49e0a2-cade-47d4-873f-1c7c4934581c",
            "fbcb1136-7657-4234-bdbf-7ce841c1e7cc",
            "fdb535eb-f4f0-4726-b94a-2b31e6685df4",
            "c66c4632-e7a4-466b-b0f9-189d19ad5a6e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6540,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "47126953-86d1-421a-b5e5-5d5e7ae3ffaa",
      "title": "",
      "fullFile": "cypress/integration/test_example_spec.js",
      "file": "cypress/integration/test_example_spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [
        {
          "title": "Tests if all example DIDs return HTTP status 200",
          "fullTitle": "Tests if all example DIDs return HTTP status 200",
          "timedOut": null,
          "duration": 611,
          "state": "failed",
          "speed": null,
          "pass": false,
          "fail": true,
          "pending": false,
          "context": null,
          "code": "function getExamples() {\n  cy.request({\n    method: \"GET\",\n    url: \"https://api.dev.godiddy.com/0.1.0/universal-resolver/testIdentifiers\",\n    failOnStatusCode: false\n  }).then(response => {\n    const methods = response.body;\n    cy.wrap(methods).as(\"examplesGodiddy\");\n  });\n}\ngetExamples();\ncy.get(\"@examplesGodiddy\").then(response => {\n  console.log(response);\n  Object.keys(response).forEach(key => {\n    response[key].forEach(did => {\n      cy.request({\n        method: \"GET\",\n        url: \"https://api.dev.godiddy.com/0.1.0/universal-resolver/identifiers/\" + did,\n        failOnStatusCode: false\n      }).then(response => {\n        softExpect(response.status).to.eq(200);\n      });\n    });\n  });\n});",
          "err": {
            "message": "TypeError: softExpect is not a function",
            "estack": "TypeError: softExpect is not a function\n    at Context.eval (http://localhost:56829/__cypress/tests?p=cypress/integration/test_example_spec.js:124:11)",
            "diff": null
          },
          "uuid": "cae970a8-916a-40c4-a6e6-7c694fad3a24",
          "parentUUID": "47126953-86d1-421a-b5e5-5d5e7ae3ffaa",
          "isHook": false,
          "skipped": false
        }
      ],
      "suites": [],
      "passes": [],
      "failures": [
        "cae970a8-916a-40c4-a6e6-7c694fad3a24"
      ],
      "pending": [],
      "skipped": [],
      "duration": 611,
      "root": true,
      "rootEmpty": false,
      "_timeout": 2000
    },
    {
      "uuid": "1d772cbd-4174-476f-8416-987fff10eeae",
      "title": "",
      "fullFile": "cypress/integration/uniresolver_fixtures_spec.js",
      "file": "cypress/integration/uniresolver_fixtures_spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e1d63f29-04eb-4bb5-8a6d-20b50c564b9c",
          "title": "Test Scenario 1: DID Resolution Result fixtures: undefined",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A correct DID can be resolved",
              "fullTitle": "Test Scenario 1: DID Resolution Result fixtures: undefined A correct DID can be resolved",
              "timedOut": null,
              "duration": 66,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"normalDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const normalDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + normalDid\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      expect(response.status).to.eq(200);\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution');\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.body).to.have.property(\"didDocument\");\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.body).to.have.property(\"didResolutionMetadata\");\n    });\n    cy.get(\"@request\").then(response => {\n      expect(response.body).to.have.property(\"didDocumentMetadata\");\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:56829/__cypress/runner/cypress_runner.js:160445:78)\nFrom Your Spec Code:\n    at eval (http://localhost:56829/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:107:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:56829/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:105:27)",
                "diff": null
              },
              "uuid": "8cf230ad-567e-4dc2-86e1-cce6d31f900a",
              "parentUUID": "e1d63f29-04eb-4bb5-8a6d-20b50c564b9c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "8cf230ad-567e-4dc2-86e1-cce6d31f900a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 66,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5b5eed27-6f08-4def-a655-2c5d7d51182c",
          "title": "Test Scenario 2: JSON-LD DID document",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A correct DID can be resolved with header input",
              "fullTitle": "Test Scenario 2: JSON-LD DID document A correct DID can be resolved with header input",
              "timedOut": null,
              "duration": 39,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"normalDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const normalDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + normalDid,\n      headers: {\n        Accept: \"application/did+ld+json\"\n      }\n    }).as(\"headers\");\n    cy.get(\"@headers\").then(response => {\n      expect(response.status).to.eq(200);\n      expect(response.headers[\"content-type\"]).to.contain(\"application/did+ld+json\");\n      expect(response.body).not.to.have.property(\"didDocument\");\n      expect(response.body).to.have.property(\"@context\");\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:56829/__cypress/runner/cypress_runner.js:160445:78)\nFrom Your Spec Code:\n    at eval (http://localhost:56829/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:138:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:56829/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:136:27)",
                "diff": null
              },
              "uuid": "42b530da-125b-467e-8328-50eb698d5db3",
              "parentUUID": "5b5eed27-6f08-4def-a655-2c5d7d51182c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "42b530da-125b-467e-8328-50eb698d5db3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 39,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d7cbc005-caca-4e6c-bf58-8e56ba721010",
          "title": "Test Scenario 3: Representation not supported",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Shows an error when a representation is prompted",
              "fullTitle": "Test Scenario 3: Representation not supported Shows an error when a representation is prompted",
              "timedOut": null,
              "duration": 34,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"normalDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const normalDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + normalDid,\n      headers: {\n        Accept: \"image/png\"\n      },\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(406);\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:56829/__cypress/runner/cypress_runner.js:160445:78)\nFrom Your Spec Code:\n    at eval (http://localhost:56829/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:163:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:56829/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:161:27)",
                "diff": null
              },
              "uuid": "9b4fb372-046e-40cf-afd7-3c83d73bb50a",
              "parentUUID": "d7cbc005-caca-4e6c-bf58-8e56ba721010",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "9b4fb372-046e-40cf-afd7-3c83d73bb50a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 34,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d0cbbeb1-d9e3-4f8d-9a71-cda924b84b72",
          "title": "Test Scenario 4: Deactivated",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Returns an HTTP code of 410 for deactivated DIDs",
              "fullTitle": "Test Scenario 4: Deactivated Returns an HTTP code of 410 for deactivated DIDs",
              "timedOut": null,
              "duration": 29,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"deacDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const deacDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + deacDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(410);\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"'); //FAILS\n      expect(response.body.didDocumentMetadata.deactivated).to.eq(true);\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:56829/__cypress/runner/cypress_runner.js:160445:78)\nFrom Your Spec Code:\n    at eval (http://localhost:56829/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:185:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:56829/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:183:27)",
                "diff": null
              },
              "uuid": "87e43692-3a3a-43f6-8830-25247f0a9807",
              "parentUUID": "d0cbbeb1-d9e3-4f8d-9a71-cda924b84b72",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "87e43692-3a3a-43f6-8830-25247f0a9807"
          ],
          "pending": [],
          "skipped": [],
          "duration": 29,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cc31eb77-debf-4a95-ab0b-a2ff309ee1f8",
          "title": "Test Scenario 5: Not found",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Returns an HTTP code of 404 for non-existent DIDs",
              "fullTitle": "Test Scenario 5: Not found Returns an HTTP code of 404 for non-existent DIDs",
              "timedOut": null,
              "duration": 31,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"nonExisDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const nonExDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + nonExDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(404);\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n      expect(response.body.didResolutionMetadata.error).to.eq(\"notFound\");\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:56829/__cypress/runner/cypress_runner.js:160445:78)\nFrom Your Spec Code:\n    at eval (http://localhost:56829/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:207:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:56829/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:205:27)",
                "diff": null
              },
              "uuid": "ae51ff7b-adc0-4837-83a0-4f84db26ae5e",
              "parentUUID": "cc31eb77-debf-4a95-ab0b-a2ff309ee1f8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "ae51ff7b-adc0-4837-83a0-4f84db26ae5e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 31,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3020390e-5bf3-4350-9550-7242a992ffcb",
          "title": "Test Scenario 6: Invalid DID",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Returns a HTTP code of 400 for an invalid DID",
              "fullTitle": "Test Scenario 6: Invalid DID Returns a HTTP code of 400 for an invalid DID",
              "timedOut": null,
              "duration": 39,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"invalidDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const invalidDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + invalidDid,\n      failOnStatusCode: false\n    }).then(response => {\n      expect(response.status).to.eq(400);\n      expect(response.headers[\"content-type\"]).to.contain('application/ld+json;profile=\"https://w3id.org/did-resolution\"');\n      expect(response.body.didResolutionMetadata.error).to.eq(\"invalidDid\");\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:56829/__cypress/runner/cypress_runner.js:160445:78)\nFrom Your Spec Code:\n    at eval (http://localhost:56829/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:228:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:56829/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:226:27)",
                "diff": null
              },
              "uuid": "b6705d24-2856-4531-8da6-b236637ef37e",
              "parentUUID": "3020390e-5bf3-4350-9550-7242a992ffcb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b6705d24-2856-4531-8da6-b236637ef37e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 39,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "412a1485-f247-4a91-aa58-e710e9fed517",
          "title": "Test Scenario 7: DID URLs with fragments",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Can resolve a DID with a fragment",
              "fullTitle": "Test Scenario 7: DID URLs with fragments Can resolve a DID with a fragment",
              "timedOut": null,
              "duration": 34,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.fixture(\"../fixtures/example_dids.json\").its(\"fragmentDids\").then(list => {\n  Object.keys(list).forEach(key => {\n    const fragmentDid = list[key];\n    cy.request({\n      method: \"GET\",\n      url: endpoint + fragmentDid,\n      failOnStatusCode: false,\n      headers: {\n        Accept: \"application/did+ld+json\"\n      }\n    }).as(\"request\");\n    cy.get(\"@request\").then(response => {\n      console.log(response);\n      expect(response.status).to.eq(200);\n      expect(response.headers[\"content-type\"]).to.contain(\"application/did+ld+json\");\n      expect(response.body).not.to.have.property(\"didDocument\");\n      expect(response.body).to.have.property(\"@context\");\n      expect(response.body).to.have.property(\"type\");\n      expect(response.body).to.have.property(\"id\");\n      expect(response.body[\"id\"]).to.contain(decodeURIComponent(fragmentDid.split(\"#\")[0]));\n    });\n  });\n});",
              "err": {
                "message": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` must be provided a fully qualified `url` - one that begins with `http`. By default `cy.request()` will use either the current window's origin or the `baseUrl` in `cypress.json`. Neither of those values were present.\n\nhttps://on.cypress.io/request\n    at Context.request (http://localhost:56829/__cypress/runner/cypress_runner.js:160434:78)\nFrom Your Spec Code:\n    at eval (http://localhost:56829/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:249:14)\nat Array.forEach (<anonymous>)\n    at Context.eval (http://localhost:56829/__cypress/tests?p=cypress/integration/uniresolver_fixtures_spec.js:247:27)",
                "diff": null
              },
              "uuid": "482696de-7b3c-4b8f-917f-d41046969348",
              "parentUUID": "412a1485-f247-4a91-aa58-e710e9fed517",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "482696de-7b3c-4b8f-917f-d41046969348"
          ],
          "pending": [],
          "skipped": [],
          "duration": 34,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.2"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mocha",
        "configFile": "reporterOpts.json",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.1.1"
    }
  }
}